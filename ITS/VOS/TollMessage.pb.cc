// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TollMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TollMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TollMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TollMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TollMessage_2eproto() {
  protobuf_AddDesc_TollMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TollMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TollMessage_descriptor_ = file->message_type(0);
  static const int TollMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, laneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, staffname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, platenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, vehicleclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, cameralaneip_),
  };
  TollMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TollMessage_descriptor_,
      TollMessage::default_instance_,
      TollMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TollMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TollMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TollMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TollMessage_descriptor_, &TollMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TollMessage_2eproto() {
  delete TollMessage::default_instance_;
  delete TollMessage_reflection_;
}

void protobuf_AddDesc_TollMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TollMessage.proto\"\223\001\n\013TollMessage\022\016\n\006l"
    "aneid\030\001 \002(\005\022\r\n\005price\030\002 \002(\r\022\021\n\ttimestamp\030"
    "\003 \002(\014\022\021\n\tstaffname\030\004 \002(\014\022\023\n\013platenumber\030"
    "\005 \002(\014\022\024\n\014vehicleclass\030\006 \002(\014\022\024\n\014cameralan"
    "eip\030\007 \002(\014", 169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TollMessage.proto", &protobuf_RegisterTypes);
  TollMessage::default_instance_ = new TollMessage();
  TollMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TollMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TollMessage_2eproto {
  StaticDescriptorInitializer_TollMessage_2eproto() {
    protobuf_AddDesc_TollMessage_2eproto();
  }
} static_descriptor_initializer_TollMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TollMessage::kLaneidFieldNumber;
const int TollMessage::kPriceFieldNumber;
const int TollMessage::kTimestampFieldNumber;
const int TollMessage::kStaffnameFieldNumber;
const int TollMessage::kPlatenumberFieldNumber;
const int TollMessage::kVehicleclassFieldNumber;
const int TollMessage::kCameralaneipFieldNumber;
#endif  // !_MSC_VER

TollMessage::TollMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TollMessage::InitAsDefaultInstance() {
}

TollMessage::TollMessage(const TollMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TollMessage::SharedCtor() {
  _cached_size_ = 0;
  laneid_ = 0;
  price_ = 0u;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  staffname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vehicleclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cameralaneip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TollMessage::~TollMessage() {
  SharedDtor();
}

void TollMessage::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (staffname_ != &::google::protobuf::internal::kEmptyString) {
    delete staffname_;
  }
  if (platenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete platenumber_;
  }
  if (vehicleclass_ != &::google::protobuf::internal::kEmptyString) {
    delete vehicleclass_;
  }
  if (cameralaneip_ != &::google::protobuf::internal::kEmptyString) {
    delete cameralaneip_;
  }
  if (this != default_instance_) {
  }
}

void TollMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TollMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TollMessage_descriptor_;
}

const TollMessage& TollMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TollMessage_2eproto();
  return *default_instance_;
}

TollMessage* TollMessage::default_instance_ = NULL;

TollMessage* TollMessage::New() const {
  return new TollMessage;
}

void TollMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    laneid_ = 0;
    price_ = 0u;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_staffname()) {
      if (staffname_ != &::google::protobuf::internal::kEmptyString) {
        staffname_->clear();
      }
    }
    if (has_platenumber()) {
      if (platenumber_ != &::google::protobuf::internal::kEmptyString) {
        platenumber_->clear();
      }
    }
    if (has_vehicleclass()) {
      if (vehicleclass_ != &::google::protobuf::internal::kEmptyString) {
        vehicleclass_->clear();
      }
    }
    if (has_cameralaneip()) {
      if (cameralaneip_ != &::google::protobuf::internal::kEmptyString) {
        cameralaneip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TollMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 laneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneid_)));
          set_has_laneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required bytes timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_staffname;
        break;
      }

      // required bytes staffname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_staffname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_staffname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platenumber;
        break;
      }

      // required bytes platenumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vehicleclass;
        break;
      }

      // required bytes vehicleclass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicleclass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vehicleclass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cameralaneip;
        break;
      }

      // required bytes cameralaneip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameralaneip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cameralaneip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TollMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 laneid = 1;
  if (has_laneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->laneid(), output);
  }

  // required uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->timestamp(), output);
  }

  // required bytes staffname = 4;
  if (has_staffname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->staffname(), output);
  }

  // required bytes platenumber = 5;
  if (has_platenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->platenumber(), output);
  }

  // required bytes vehicleclass = 6;
  if (has_vehicleclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->vehicleclass(), output);
  }

  // required bytes cameralaneip = 7;
  if (has_cameralaneip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->cameralaneip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TollMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 laneid = 1;
  if (has_laneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->laneid(), target);
  }

  // required uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->timestamp(), target);
  }

  // required bytes staffname = 4;
  if (has_staffname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->staffname(), target);
  }

  // required bytes platenumber = 5;
  if (has_platenumber()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->platenumber(), target);
  }

  // required bytes vehicleclass = 6;
  if (has_vehicleclass()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->vehicleclass(), target);
  }

  // required bytes cameralaneip = 7;
  if (has_cameralaneip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cameralaneip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TollMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 laneid = 1;
    if (has_laneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laneid());
    }

    // required uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required bytes timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }

    // required bytes staffname = 4;
    if (has_staffname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->staffname());
    }

    // required bytes platenumber = 5;
    if (has_platenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platenumber());
    }

    // required bytes vehicleclass = 6;
    if (has_vehicleclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vehicleclass());
    }

    // required bytes cameralaneip = 7;
    if (has_cameralaneip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cameralaneip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TollMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TollMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TollMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TollMessage::MergeFrom(const TollMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laneid()) {
      set_laneid(from.laneid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_staffname()) {
      set_staffname(from.staffname());
    }
    if (from.has_platenumber()) {
      set_platenumber(from.platenumber());
    }
    if (from.has_vehicleclass()) {
      set_vehicleclass(from.vehicleclass());
    }
    if (from.has_cameralaneip()) {
      set_cameralaneip(from.cameralaneip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TollMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TollMessage::CopyFrom(const TollMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TollMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void TollMessage::Swap(TollMessage* other) {
  if (other != this) {
    std::swap(laneid_, other->laneid_);
    std::swap(price_, other->price_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(staffname_, other->staffname_);
    std::swap(platenumber_, other->platenumber_);
    std::swap(vehicleclass_, other->vehicleclass_);
    std::swap(cameralaneip_, other->cameralaneip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TollMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TollMessage_descriptor_;
  metadata.reflection = TollMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
