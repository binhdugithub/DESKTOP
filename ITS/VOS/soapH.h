/* soapH.h
   Generated by gSOAP 2.8.17r from videooverlayws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__settextposition
#define SOAP_TYPE_ns__settextposition (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__settextposition(struct soap*, struct ns__settextposition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__settextposition(struct soap*, const struct ns__settextposition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__settextposition(struct soap*, const char*, int, const struct ns__settextposition *, const char*);
SOAP_FMAC3 struct ns__settextposition * SOAP_FMAC4 soap_in_ns__settextposition(struct soap*, const char*, struct ns__settextposition *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__settextposition(struct soap*, const struct ns__settextposition *, const char*, const char*);

#ifndef soap_write_ns__settextposition
#define soap_write_ns__settextposition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__settextposition(soap, data),0) || soap_put_ns__settextposition(soap, data, "ns:settextposition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__settextposition * SOAP_FMAC4 soap_get_ns__settextposition(struct soap*, struct ns__settextposition *, const char*, const char*);

#ifndef soap_read_ns__settextposition
#define soap_read_ns__settextposition(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__settextposition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__settextposition * SOAP_FMAC2 soap_instantiate_ns__settextposition(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__settextposition * soap_new_ns__settextposition(struct soap *soap, int n = -1) { return soap_instantiate_ns__settextposition(soap, n, NULL, NULL, NULL); }

inline struct ns__settextposition * soap_new_req_ns__settextposition(struct soap *soap, int lanepos, int staffpos, int classpos, int licensenumberpos, int pricepos, int timestamppos) { struct ns__settextposition *_p = soap_instantiate_ns__settextposition(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__settextposition(soap, _p); _p->lanepos = lanepos; _p->staffpos = staffpos; _p->classpos = classpos; _p->licensenumberpos = licensenumberpos; _p->pricepos = pricepos; _p->timestamppos = timestamppos; } return _p; }

inline struct ns__settextposition * soap_new_set_ns__settextposition(struct soap *soap, int lanepos, int staffpos, int classpos, int licensenumberpos, int pricepos, int timestamppos) { struct ns__settextposition *_p = soap_instantiate_ns__settextposition(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__settextposition(soap, _p); _p->lanepos = lanepos; _p->staffpos = staffpos; _p->classpos = classpos; _p->licensenumberpos = licensenumberpos; _p->pricepos = pricepos; _p->timestamppos = timestamppos; } return _p; }

inline void soap_delete_ns__settextposition(struct soap *soap, struct ns__settextposition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__settextposition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__settextpositionResponse
#define SOAP_TYPE_ns__settextpositionResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__settextpositionResponse(struct soap*, struct ns__settextpositionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__settextpositionResponse(struct soap*, const struct ns__settextpositionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__settextpositionResponse(struct soap*, const char*, int, const struct ns__settextpositionResponse *, const char*);
SOAP_FMAC3 struct ns__settextpositionResponse * SOAP_FMAC4 soap_in_ns__settextpositionResponse(struct soap*, const char*, struct ns__settextpositionResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__settextpositionResponse(struct soap*, const struct ns__settextpositionResponse *, const char*, const char*);

#ifndef soap_write_ns__settextpositionResponse
#define soap_write_ns__settextpositionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__settextpositionResponse(soap, data),0) || soap_put_ns__settextpositionResponse(soap, data, "ns:settextpositionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__settextpositionResponse * SOAP_FMAC4 soap_get_ns__settextpositionResponse(struct soap*, struct ns__settextpositionResponse *, const char*, const char*);

#ifndef soap_read_ns__settextpositionResponse
#define soap_read_ns__settextpositionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__settextpositionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__settextpositionResponse * SOAP_FMAC2 soap_instantiate_ns__settextpositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__settextpositionResponse * soap_new_ns__settextpositionResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__settextpositionResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__settextpositionResponse * soap_new_req_ns__settextpositionResponse(struct soap *soap) { struct ns__settextpositionResponse *_p = soap_instantiate_ns__settextpositionResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__settextpositionResponse(soap, _p); } return _p; }

inline struct ns__settextpositionResponse * soap_new_set_ns__settextpositionResponse(struct soap *soap, struct soap_overlay_status *result) { struct ns__settextpositionResponse *_p = soap_instantiate_ns__settextpositionResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__settextpositionResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__settextpositionResponse(struct soap *soap, struct ns__settextpositionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__settextpositionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__runserver
#define SOAP_TYPE_ns__runserver (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runserver(struct soap*, struct ns__runserver *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runserver(struct soap*, const struct ns__runserver *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runserver(struct soap*, const char*, int, const struct ns__runserver *, const char*);
SOAP_FMAC3 struct ns__runserver * SOAP_FMAC4 soap_in_ns__runserver(struct soap*, const char*, struct ns__runserver *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runserver(struct soap*, const struct ns__runserver *, const char*, const char*);

#ifndef soap_write_ns__runserver
#define soap_write_ns__runserver(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__runserver(soap, data),0) || soap_put_ns__runserver(soap, data, "ns:runserver", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__runserver * SOAP_FMAC4 soap_get_ns__runserver(struct soap*, struct ns__runserver *, const char*, const char*);

#ifndef soap_read_ns__runserver
#define soap_read_ns__runserver(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__runserver(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__runserver * SOAP_FMAC2 soap_instantiate_ns__runserver(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__runserver * soap_new_ns__runserver(struct soap *soap, int n = -1) { return soap_instantiate_ns__runserver(soap, n, NULL, NULL, NULL); }

inline struct ns__runserver * soap_new_req_ns__runserver(struct soap *soap, int command) { struct ns__runserver *_p = soap_instantiate_ns__runserver(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runserver(soap, _p); _p->command = command; } return _p; }

inline struct ns__runserver * soap_new_set_ns__runserver(struct soap *soap, int command) { struct ns__runserver *_p = soap_instantiate_ns__runserver(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runserver(soap, _p); _p->command = command; } return _p; }

inline void soap_delete_ns__runserver(struct soap *soap, struct ns__runserver *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runserver(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__runserverResponse
#define SOAP_TYPE_ns__runserverResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runserverResponse(struct soap*, struct ns__runserverResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runserverResponse(struct soap*, const struct ns__runserverResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runserverResponse(struct soap*, const char*, int, const struct ns__runserverResponse *, const char*);
SOAP_FMAC3 struct ns__runserverResponse * SOAP_FMAC4 soap_in_ns__runserverResponse(struct soap*, const char*, struct ns__runserverResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runserverResponse(struct soap*, const struct ns__runserverResponse *, const char*, const char*);

#ifndef soap_write_ns__runserverResponse
#define soap_write_ns__runserverResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__runserverResponse(soap, data),0) || soap_put_ns__runserverResponse(soap, data, "ns:runserverResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__runserverResponse * SOAP_FMAC4 soap_get_ns__runserverResponse(struct soap*, struct ns__runserverResponse *, const char*, const char*);

#ifndef soap_read_ns__runserverResponse
#define soap_read_ns__runserverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__runserverResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__runserverResponse * SOAP_FMAC2 soap_instantiate_ns__runserverResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__runserverResponse * soap_new_ns__runserverResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__runserverResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__runserverResponse * soap_new_req_ns__runserverResponse(struct soap *soap) { struct ns__runserverResponse *_p = soap_instantiate_ns__runserverResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runserverResponse(soap, _p); } return _p; }

inline struct ns__runserverResponse * soap_new_set_ns__runserverResponse(struct soap *soap, struct soap_overlay_status *result) { struct ns__runserverResponse *_p = soap_instantiate_ns__runserverResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runserverResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__runserverResponse(struct soap *soap, struct ns__runserverResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runserverResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__runsource
#define SOAP_TYPE_ns__runsource (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runsource(struct soap*, struct ns__runsource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runsource(struct soap*, const struct ns__runsource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runsource(struct soap*, const char*, int, const struct ns__runsource *, const char*);
SOAP_FMAC3 struct ns__runsource * SOAP_FMAC4 soap_in_ns__runsource(struct soap*, const char*, struct ns__runsource *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runsource(struct soap*, const struct ns__runsource *, const char*, const char*);

#ifndef soap_write_ns__runsource
#define soap_write_ns__runsource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__runsource(soap, data),0) || soap_put_ns__runsource(soap, data, "ns:runsource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__runsource * SOAP_FMAC4 soap_get_ns__runsource(struct soap*, struct ns__runsource *, const char*, const char*);

#ifndef soap_read_ns__runsource
#define soap_read_ns__runsource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__runsource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__runsource * SOAP_FMAC2 soap_instantiate_ns__runsource(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__runsource * soap_new_ns__runsource(struct soap *soap, int n = -1) { return soap_instantiate_ns__runsource(soap, n, NULL, NULL, NULL); }

inline struct ns__runsource * soap_new_req_ns__runsource(struct soap *soap, int command) { struct ns__runsource *_p = soap_instantiate_ns__runsource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runsource(soap, _p); _p->command = command; } return _p; }

inline struct ns__runsource * soap_new_set_ns__runsource(struct soap *soap, int command, char *sourceurl) { struct ns__runsource *_p = soap_instantiate_ns__runsource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runsource(soap, _p); _p->command = command; _p->sourceurl = sourceurl; } return _p; }

inline void soap_delete_ns__runsource(struct soap *soap, struct ns__runsource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runsource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__runsourceResponse
#define SOAP_TYPE_ns__runsourceResponse (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runsourceResponse(struct soap*, struct ns__runsourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runsourceResponse(struct soap*, const struct ns__runsourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runsourceResponse(struct soap*, const char*, int, const struct ns__runsourceResponse *, const char*);
SOAP_FMAC3 struct ns__runsourceResponse * SOAP_FMAC4 soap_in_ns__runsourceResponse(struct soap*, const char*, struct ns__runsourceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runsourceResponse(struct soap*, const struct ns__runsourceResponse *, const char*, const char*);

#ifndef soap_write_ns__runsourceResponse
#define soap_write_ns__runsourceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__runsourceResponse(soap, data),0) || soap_put_ns__runsourceResponse(soap, data, "ns:runsourceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__runsourceResponse * SOAP_FMAC4 soap_get_ns__runsourceResponse(struct soap*, struct ns__runsourceResponse *, const char*, const char*);

#ifndef soap_read_ns__runsourceResponse
#define soap_read_ns__runsourceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__runsourceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__runsourceResponse * SOAP_FMAC2 soap_instantiate_ns__runsourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__runsourceResponse * soap_new_ns__runsourceResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__runsourceResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__runsourceResponse * soap_new_req_ns__runsourceResponse(struct soap *soap) { struct ns__runsourceResponse *_p = soap_instantiate_ns__runsourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runsourceResponse(soap, _p); } return _p; }

inline struct ns__runsourceResponse * soap_new_set_ns__runsourceResponse(struct soap *soap, struct soap_overlay_status *result) { struct ns__runsourceResponse *_p = soap_instantiate_ns__runsourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__runsourceResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__runsourceResponse(struct soap *soap, struct ns__runsourceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runsourceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__delsource
#define SOAP_TYPE_ns__delsource (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__delsource(struct soap*, struct ns__delsource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__delsource(struct soap*, const struct ns__delsource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__delsource(struct soap*, const char*, int, const struct ns__delsource *, const char*);
SOAP_FMAC3 struct ns__delsource * SOAP_FMAC4 soap_in_ns__delsource(struct soap*, const char*, struct ns__delsource *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__delsource(struct soap*, const struct ns__delsource *, const char*, const char*);

#ifndef soap_write_ns__delsource
#define soap_write_ns__delsource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__delsource(soap, data),0) || soap_put_ns__delsource(soap, data, "ns:delsource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__delsource * SOAP_FMAC4 soap_get_ns__delsource(struct soap*, struct ns__delsource *, const char*, const char*);

#ifndef soap_read_ns__delsource
#define soap_read_ns__delsource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__delsource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__delsource * SOAP_FMAC2 soap_instantiate_ns__delsource(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__delsource * soap_new_ns__delsource(struct soap *soap, int n = -1) { return soap_instantiate_ns__delsource(soap, n, NULL, NULL, NULL); }

inline struct ns__delsource * soap_new_req_ns__delsource(struct soap *soap) { struct ns__delsource *_p = soap_instantiate_ns__delsource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__delsource(soap, _p); } return _p; }

inline struct ns__delsource * soap_new_set_ns__delsource(struct soap *soap, char *sourceurl) { struct ns__delsource *_p = soap_instantiate_ns__delsource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__delsource(soap, _p); _p->sourceurl = sourceurl; } return _p; }

inline void soap_delete_ns__delsource(struct soap *soap, struct ns__delsource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__delsource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__delsourceResponse
#define SOAP_TYPE_ns__delsourceResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__delsourceResponse(struct soap*, struct ns__delsourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__delsourceResponse(struct soap*, const struct ns__delsourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__delsourceResponse(struct soap*, const char*, int, const struct ns__delsourceResponse *, const char*);
SOAP_FMAC3 struct ns__delsourceResponse * SOAP_FMAC4 soap_in_ns__delsourceResponse(struct soap*, const char*, struct ns__delsourceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__delsourceResponse(struct soap*, const struct ns__delsourceResponse *, const char*, const char*);

#ifndef soap_write_ns__delsourceResponse
#define soap_write_ns__delsourceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__delsourceResponse(soap, data),0) || soap_put_ns__delsourceResponse(soap, data, "ns:delsourceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__delsourceResponse * SOAP_FMAC4 soap_get_ns__delsourceResponse(struct soap*, struct ns__delsourceResponse *, const char*, const char*);

#ifndef soap_read_ns__delsourceResponse
#define soap_read_ns__delsourceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__delsourceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__delsourceResponse * SOAP_FMAC2 soap_instantiate_ns__delsourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__delsourceResponse * soap_new_ns__delsourceResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__delsourceResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__delsourceResponse * soap_new_req_ns__delsourceResponse(struct soap *soap) { struct ns__delsourceResponse *_p = soap_instantiate_ns__delsourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__delsourceResponse(soap, _p); } return _p; }

inline struct ns__delsourceResponse * soap_new_set_ns__delsourceResponse(struct soap *soap, struct soap_overlay_status *result) { struct ns__delsourceResponse *_p = soap_instantiate_ns__delsourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__delsourceResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__delsourceResponse(struct soap *soap, struct ns__delsourceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__delsourceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addsource
#define SOAP_TYPE_ns__addsource (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addsource(struct soap*, struct ns__addsource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addsource(struct soap*, const struct ns__addsource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addsource(struct soap*, const char*, int, const struct ns__addsource *, const char*);
SOAP_FMAC3 struct ns__addsource * SOAP_FMAC4 soap_in_ns__addsource(struct soap*, const char*, struct ns__addsource *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addsource(struct soap*, const struct ns__addsource *, const char*, const char*);

#ifndef soap_write_ns__addsource
#define soap_write_ns__addsource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addsource(soap, data),0) || soap_put_ns__addsource(soap, data, "ns:addsource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addsource * SOAP_FMAC4 soap_get_ns__addsource(struct soap*, struct ns__addsource *, const char*, const char*);

#ifndef soap_read_ns__addsource
#define soap_read_ns__addsource(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addsource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addsource * SOAP_FMAC2 soap_instantiate_ns__addsource(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addsource * soap_new_ns__addsource(struct soap *soap, int n = -1) { return soap_instantiate_ns__addsource(soap, n, NULL, NULL, NULL); }

inline struct ns__addsource * soap_new_req_ns__addsource(struct soap *soap) { struct ns__addsource *_p = soap_instantiate_ns__addsource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addsource(soap, _p); } return _p; }

inline struct ns__addsource * soap_new_set_ns__addsource(struct soap *soap, char *sourceurl, char *sourcename) { struct ns__addsource *_p = soap_instantiate_ns__addsource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addsource(soap, _p); _p->sourceurl = sourceurl; _p->sourcename = sourcename; } return _p; }

inline void soap_delete_ns__addsource(struct soap *soap, struct ns__addsource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addsource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addsourceResponse
#define SOAP_TYPE_ns__addsourceResponse (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addsourceResponse(struct soap*, struct ns__addsourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addsourceResponse(struct soap*, const struct ns__addsourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addsourceResponse(struct soap*, const char*, int, const struct ns__addsourceResponse *, const char*);
SOAP_FMAC3 struct ns__addsourceResponse * SOAP_FMAC4 soap_in_ns__addsourceResponse(struct soap*, const char*, struct ns__addsourceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addsourceResponse(struct soap*, const struct ns__addsourceResponse *, const char*, const char*);

#ifndef soap_write_ns__addsourceResponse
#define soap_write_ns__addsourceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addsourceResponse(soap, data),0) || soap_put_ns__addsourceResponse(soap, data, "ns:addsourceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addsourceResponse * SOAP_FMAC4 soap_get_ns__addsourceResponse(struct soap*, struct ns__addsourceResponse *, const char*, const char*);

#ifndef soap_read_ns__addsourceResponse
#define soap_read_ns__addsourceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addsourceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addsourceResponse * SOAP_FMAC2 soap_instantiate_ns__addsourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addsourceResponse * soap_new_ns__addsourceResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__addsourceResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__addsourceResponse * soap_new_req_ns__addsourceResponse(struct soap *soap) { struct ns__addsourceResponse *_p = soap_instantiate_ns__addsourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addsourceResponse(soap, _p); } return _p; }

inline struct ns__addsourceResponse * soap_new_set_ns__addsourceResponse(struct soap *soap, struct voverlay_add_source_result *result) { struct ns__addsourceResponse *_p = soap_instantiate_ns__addsourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addsourceResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__addsourceResponse(struct soap *soap, struct ns__addsourceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addsourceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_voverlay_add_source_result
#define SOAP_TYPE_voverlay_add_source_result (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_voverlay_add_source_result(struct soap*, struct voverlay_add_source_result *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_voverlay_add_source_result(struct soap*, const struct voverlay_add_source_result *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_voverlay_add_source_result(struct soap*, const char*, int, const struct voverlay_add_source_result *, const char*);
SOAP_FMAC3 struct voverlay_add_source_result * SOAP_FMAC4 soap_in_voverlay_add_source_result(struct soap*, const char*, struct voverlay_add_source_result *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_voverlay_add_source_result(struct soap*, const struct voverlay_add_source_result *, const char*, const char*);

#ifndef soap_write_voverlay_add_source_result
#define soap_write_voverlay_add_source_result(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_voverlay_add_source_result(soap, data),0) || soap_put_voverlay_add_source_result(soap, data, "voverlay-add-source-result", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct voverlay_add_source_result * SOAP_FMAC4 soap_get_voverlay_add_source_result(struct soap*, struct voverlay_add_source_result *, const char*, const char*);

#ifndef soap_read_voverlay_add_source_result
#define soap_read_voverlay_add_source_result(soap, data) ( soap_begin_recv(soap) || !soap_get_voverlay_add_source_result(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct voverlay_add_source_result * SOAP_FMAC2 soap_instantiate_voverlay_add_source_result(struct soap*, int, const char*, const char*, size_t*);

inline struct voverlay_add_source_result * soap_new_voverlay_add_source_result(struct soap *soap, int n = -1) { return soap_instantiate_voverlay_add_source_result(soap, n, NULL, NULL, NULL); }

inline struct voverlay_add_source_result * soap_new_req_voverlay_add_source_result(struct soap *soap, struct soap_overlay_status& state) { struct voverlay_add_source_result *_p = soap_instantiate_voverlay_add_source_result(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_voverlay_add_source_result(soap, _p); _p->state = state; } return _p; }

inline struct voverlay_add_source_result * soap_new_set_voverlay_add_source_result(struct soap *soap, struct soap_overlay_status& state, char *output_url) { struct voverlay_add_source_result *_p = soap_instantiate_voverlay_add_source_result(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_voverlay_add_source_result(soap, _p); _p->state = state; _p->output_url = output_url; } return _p; }

inline void soap_delete_voverlay_add_source_result(struct soap *soap, struct voverlay_add_source_result *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_voverlay_add_source_result(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap_overlay_status
#define SOAP_TYPE_soap_overlay_status (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_overlay_status(struct soap*, struct soap_overlay_status *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_overlay_status(struct soap*, const struct soap_overlay_status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_overlay_status(struct soap*, const char*, int, const struct soap_overlay_status *, const char*);
SOAP_FMAC3 struct soap_overlay_status * SOAP_FMAC4 soap_in_soap_overlay_status(struct soap*, const char*, struct soap_overlay_status *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_overlay_status(struct soap*, const struct soap_overlay_status *, const char*, const char*);

#ifndef soap_write_soap_overlay_status
#define soap_write_soap_overlay_status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_soap_overlay_status(soap, data),0) || soap_put_soap_overlay_status(soap, data, "soap-overlay-status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct soap_overlay_status * SOAP_FMAC4 soap_get_soap_overlay_status(struct soap*, struct soap_overlay_status *, const char*, const char*);

#ifndef soap_read_soap_overlay_status
#define soap_read_soap_overlay_status(soap, data) ( soap_begin_recv(soap) || !soap_get_soap_overlay_status(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct soap_overlay_status * SOAP_FMAC2 soap_instantiate_soap_overlay_status(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_overlay_status * soap_new_soap_overlay_status(struct soap *soap, int n = -1) { return soap_instantiate_soap_overlay_status(soap, n, NULL, NULL, NULL); }

inline struct soap_overlay_status * soap_new_req_soap_overlay_status(struct soap *soap, int errorid) { struct soap_overlay_status *_p = soap_instantiate_soap_overlay_status(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_soap_overlay_status(soap, _p); _p->errorid = errorid; } return _p; }

inline struct soap_overlay_status * soap_new_set_soap_overlay_status(struct soap *soap, int errorid, char *errordesc) { struct soap_overlay_status *_p = soap_instantiate_soap_overlay_status(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_soap_overlay_status(soap, _p); _p->errorid = errorid; _p->errordesc = errordesc; } return _p; }

inline void soap_delete_soap_overlay_status(struct soap *soap, struct soap_overlay_status *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap_overlay_status(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTosoap_overlay_status
#define SOAP_TYPE_PointerTosoap_overlay_status (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap_overlay_status(struct soap*, struct soap_overlay_status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap_overlay_status(struct soap*, const char *, int, struct soap_overlay_status *const*, const char *);
SOAP_FMAC3 struct soap_overlay_status ** SOAP_FMAC4 soap_in_PointerTosoap_overlay_status(struct soap*, const char*, struct soap_overlay_status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap_overlay_status(struct soap*, struct soap_overlay_status *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap_overlay_status
#define soap_write_PointerTosoap_overlay_status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap_overlay_status(soap, data),0) || soap_put_PointerTosoap_overlay_status(soap, data, "soap-overlay-status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct soap_overlay_status ** SOAP_FMAC4 soap_get_PointerTosoap_overlay_status(struct soap*, struct soap_overlay_status **, const char*, const char*);

#ifndef soap_read_PointerTosoap_overlay_status
#define soap_read_PointerTosoap_overlay_status(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap_overlay_status(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTovoverlay_add_source_result
#define SOAP_TYPE_PointerTovoverlay_add_source_result (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTovoverlay_add_source_result(struct soap*, struct voverlay_add_source_result *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTovoverlay_add_source_result(struct soap*, const char *, int, struct voverlay_add_source_result *const*, const char *);
SOAP_FMAC3 struct voverlay_add_source_result ** SOAP_FMAC4 soap_in_PointerTovoverlay_add_source_result(struct soap*, const char*, struct voverlay_add_source_result **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTovoverlay_add_source_result(struct soap*, struct voverlay_add_source_result *const*, const char*, const char*);

#ifndef soap_write_PointerTovoverlay_add_source_result
#define soap_write_PointerTovoverlay_add_source_result(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTovoverlay_add_source_result(soap, data),0) || soap_put_PointerTovoverlay_add_source_result(soap, data, "voverlay-add-source-result", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct voverlay_add_source_result ** SOAP_FMAC4 soap_get_PointerTovoverlay_add_source_result(struct soap*, struct voverlay_add_source_result **, const char*, const char*);

#ifndef soap_read_PointerTovoverlay_add_source_result
#define soap_read_PointerTovoverlay_add_source_result(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTovoverlay_add_source_result(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
