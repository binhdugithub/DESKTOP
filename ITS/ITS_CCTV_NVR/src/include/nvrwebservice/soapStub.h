/* soapStub.h
   Generated by gSOAP 2.8.17r from nvrws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_nvr_error
#define SOAP_TYPE_nvr_error (8)
/* nvr-error */
enum nvr_error { NVR_OK = 0, NVR_SOURCE_NOT_FOUND = 1, NVR_SOURCE_EXIST = 2, NVR_OUT_OF_CAPACITY = 3, NVR_SOURCE_INIT_FAILED = 4 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_result_status
#define SOAP_TYPE_result_status (7)
/* result-status */
struct result_status
{
public:
	int errorid;	/* required element of type xsd:int */
	char *errordesc;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 7; } /* = unique type id SOAP_TYPE_result_status */
};
#endif

#ifndef SOAP_TYPE_ns__startrecordResponse
#define SOAP_TYPE_ns__startrecordResponse (11)
/* ns:startrecordResponse */
struct ns__startrecordResponse
{
public:
	struct result_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type result-status */
public:
	int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_ns__startrecordResponse */
};
#endif

#ifndef SOAP_TYPE_ns__startrecord
#define SOAP_TYPE_ns__startrecord (12)
/* ns:startrecord */
struct ns__startrecord
{
public:
	char *videostreamid;	/* optional element of type xsd:string */
	char *videostreamurl;	/* optional element of type xsd:string */
	int recordmode;	/* required element of type xsd:int */
	int duration;	/* required element of type xsd:int */
public:
	int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_ns__startrecord */
};
#endif

#ifndef SOAP_TYPE_ns__stoprecordResponse
#define SOAP_TYPE_ns__stoprecordResponse (14)
/* ns:stoprecordResponse */
struct ns__stoprecordResponse
{
public:
	struct result_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type result-status */
public:
	int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_ns__stoprecordResponse */
};
#endif

#ifndef SOAP_TYPE_ns__stoprecord
#define SOAP_TYPE_ns__stoprecord (15)
/* ns:stoprecord */
struct ns__stoprecord
{
public:
	char *videostreamid;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_ns__stoprecord */
};
#endif

#ifndef SOAP_TYPE_ns__setWriterParamResponse
#define SOAP_TYPE_ns__setWriterParamResponse (17)
/* ns:setWriterParamResponse */
struct ns__setWriterParamResponse
{
public:
	struct result_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type result-status */
public:
	int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_ns__setWriterParamResponse */
};
#endif

#ifndef SOAP_TYPE_ns__setWriterParam
#define SOAP_TYPE_ns__setWriterParam (18)
/* ns:setWriterParam */
struct ns__setWriterParam
{
public:
	int capacity;	/* required element of type xsd:int */
	int writemode;	/* required element of type xsd:int */
public:
	int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_ns__setWriterParam */
};
#endif

#ifndef SOAP_TYPE_ns__setBackupResponse
#define SOAP_TYPE_ns__setBackupResponse (20)
/* ns:setBackupResponse */
struct ns__setBackupResponse
{
public:
	struct result_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type result-status */
public:
	int soap_type() const { return 20; } /* = unique type id SOAP_TYPE_ns__setBackupResponse */
};
#endif

#ifndef SOAP_TYPE_ns__setBackup
#define SOAP_TYPE_ns__setBackup (21)
/* ns:setBackup */
struct ns__setBackup
{
public:
	int mode;	/* required element of type xsd:int */
	int timevalue;	/* required element of type xsd:int */
	int capacityvalue;	/* required element of type xsd:int */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_ns__setBackup */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (22)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (23)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (25)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (28)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (29)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
