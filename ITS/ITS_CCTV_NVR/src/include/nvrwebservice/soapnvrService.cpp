/* soapnvrService.cpp
   Generated by gSOAP 2.8.17r from nvrws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapnvrService.h"

nvrService::nvrService()
{	nvrService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

nvrService::nvrService(const struct soap &_soap) : soap(_soap)
{ }

nvrService::nvrService(soap_mode iomode)
{	nvrService_init(iomode, iomode);
}

nvrService::nvrService(soap_mode imode, soap_mode omode)
{	nvrService_init(imode, omode);
}

nvrService::~nvrService()
{ }

void nvrService::nvrService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:nvr", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void nvrService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void nvrService::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	nvrService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
nvrService *nvrService::copy()
{	nvrService *dup = SOAP_NEW_COPY(nvrService(*(struct soap*)this));
	return dup;
}
#endif

int nvrService::soap_close_socket()
{	return soap_closesock(this);
}

int nvrService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int nvrService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int nvrService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int nvrService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int nvrService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void nvrService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void nvrService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *nvrService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void nvrService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *nvrService::soap_header()
{
	return this->header;
}

int nvrService::run(int port)
{
	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{
		for (;;)
		{
			if (!soap_valid_socket(accept()) || serve())
				return this->error;

			soap_destroy(this);
			soap_end(this);
		}
	}
	else
	{
		return this->error;
	}

	return SOAP_OK;
}

SOAP_SOCKET nvrService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET nvrService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int nvrService::ssl_accept()
{
	return soap_ssl_accept(this);
}
#endif

int nvrService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__startrecord(nvrService*);
static int serve_ns__stoprecord(nvrService*);
static int serve_ns__setWriterParam(nvrService*);
static int serve_ns__setBackup(nvrService*);

int nvrService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:startrecord"))
		return serve_ns__startrecord(this);
	if (!soap_match_tag(this, this->tag, "ns:stoprecord"))
		return serve_ns__stoprecord(this);
	if (!soap_match_tag(this, this->tag, "ns:setWriterParam"))
		return serve_ns__setWriterParam(this);
	if (!soap_match_tag(this, this->tag, "ns:setBackup"))
		return serve_ns__setBackup(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__startrecord(nvrService *soap)
{	struct ns__startrecord soap_tmp_ns__startrecord;
	struct ns__startrecordResponse soap_tmp_ns__startrecordResponse;
	struct result_status soap_tmp_result_status;
	soap_default_ns__startrecordResponse(soap, &soap_tmp_ns__startrecordResponse);
	soap_default_result_status(soap, &soap_tmp_result_status);
	soap_tmp_ns__startrecordResponse.result = &soap_tmp_result_status;
	soap_default_ns__startrecord(soap, &soap_tmp_ns__startrecord);
	if (!soap_get_ns__startrecord(soap, &soap_tmp_ns__startrecord, "ns:startrecord", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->startrecord(soap_tmp_ns__startrecord.videostreamid, soap_tmp_ns__startrecord.videostreamurl, soap_tmp_ns__startrecord.recordmode, soap_tmp_ns__startrecord.duration, soap_tmp_ns__startrecordResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__startrecordResponse(soap, &soap_tmp_ns__startrecordResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__startrecordResponse(soap, &soap_tmp_ns__startrecordResponse, "ns:startrecordResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__startrecordResponse(soap, &soap_tmp_ns__startrecordResponse, "ns:startrecordResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__stoprecord(nvrService *soap)
{	struct ns__stoprecord soap_tmp_ns__stoprecord;
	struct ns__stoprecordResponse soap_tmp_ns__stoprecordResponse;
	struct result_status soap_tmp_result_status;
	soap_default_ns__stoprecordResponse(soap, &soap_tmp_ns__stoprecordResponse);
	soap_default_result_status(soap, &soap_tmp_result_status);
	soap_tmp_ns__stoprecordResponse.result = &soap_tmp_result_status;
	soap_default_ns__stoprecord(soap, &soap_tmp_ns__stoprecord);
	if (!soap_get_ns__stoprecord(soap, &soap_tmp_ns__stoprecord, "ns:stoprecord", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->stoprecord(soap_tmp_ns__stoprecord.videostreamid, soap_tmp_ns__stoprecordResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__stoprecordResponse(soap, &soap_tmp_ns__stoprecordResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__stoprecordResponse(soap, &soap_tmp_ns__stoprecordResponse, "ns:stoprecordResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__stoprecordResponse(soap, &soap_tmp_ns__stoprecordResponse, "ns:stoprecordResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__setWriterParam(nvrService *soap)
{	struct ns__setWriterParam soap_tmp_ns__setWriterParam;
	struct ns__setWriterParamResponse soap_tmp_ns__setWriterParamResponse;
	struct result_status soap_tmp_result_status;
	soap_default_ns__setWriterParamResponse(soap, &soap_tmp_ns__setWriterParamResponse);
	soap_default_result_status(soap, &soap_tmp_result_status);
	soap_tmp_ns__setWriterParamResponse.result = &soap_tmp_result_status;
	soap_default_ns__setWriterParam(soap, &soap_tmp_ns__setWriterParam);
	if (!soap_get_ns__setWriterParam(soap, &soap_tmp_ns__setWriterParam, "ns:setWriterParam", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->setWriterParam(soap_tmp_ns__setWriterParam.capacity, soap_tmp_ns__setWriterParam.writemode, soap_tmp_ns__setWriterParamResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__setWriterParamResponse(soap, &soap_tmp_ns__setWriterParamResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setWriterParamResponse(soap, &soap_tmp_ns__setWriterParamResponse, "ns:setWriterParamResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setWriterParamResponse(soap, &soap_tmp_ns__setWriterParamResponse, "ns:setWriterParamResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__setBackup(nvrService *soap)
{	struct ns__setBackup soap_tmp_ns__setBackup;
	struct ns__setBackupResponse soap_tmp_ns__setBackupResponse;
	struct result_status soap_tmp_result_status;
	soap_default_ns__setBackupResponse(soap, &soap_tmp_ns__setBackupResponse);
	soap_default_result_status(soap, &soap_tmp_result_status);
	soap_tmp_ns__setBackupResponse.result = &soap_tmp_result_status;
	soap_default_ns__setBackup(soap, &soap_tmp_ns__setBackup);
	if (!soap_get_ns__setBackup(soap, &soap_tmp_ns__setBackup, "ns:setBackup", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->setBackup(soap_tmp_ns__setBackup.mode, soap_tmp_ns__setBackup.timevalue, soap_tmp_ns__setBackup.capacityvalue, soap_tmp_ns__setBackupResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__setBackupResponse(soap, &soap_tmp_ns__setBackupResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__setBackupResponse(soap, &soap_tmp_ns__setBackupResponse, "ns:setBackupResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__setBackupResponse(soap, &soap_tmp_ns__setBackupResponse, "ns:setBackupResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
