/* soapH.h
   Generated by gSOAP 2.8.17r from nvrws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_nvr_error
#define SOAP_TYPE_nvr_error (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_nvr_error(struct soap*, enum nvr_error *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_nvr_error(struct soap*, const char*, int, const enum nvr_error *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_nvr_error2s(struct soap*, enum nvr_error);
SOAP_FMAC3 enum nvr_error * SOAP_FMAC4 soap_in_nvr_error(struct soap*, const char*, enum nvr_error *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2nvr_error(struct soap*, const char*, enum nvr_error *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_nvr_error(struct soap*, const enum nvr_error *, const char*, const char*);

#ifndef soap_write_nvr_error
#define soap_write_nvr_error(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_nvr_error(soap, data),0) || soap_put_nvr_error(soap, data, "nvr-error", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum nvr_error * SOAP_FMAC4 soap_get_nvr_error(struct soap*, enum nvr_error *, const char*, const char*);

#ifndef soap_read_nvr_error
#define soap_read_nvr_error(soap, data) ( soap_begin_recv(soap) || !soap_get_nvr_error(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__setBackup
#define SOAP_TYPE_ns__setBackup (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setBackup(struct soap*, struct ns__setBackup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setBackup(struct soap*, const struct ns__setBackup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setBackup(struct soap*, const char*, int, const struct ns__setBackup *, const char*);
SOAP_FMAC3 struct ns__setBackup * SOAP_FMAC4 soap_in_ns__setBackup(struct soap*, const char*, struct ns__setBackup *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setBackup(struct soap*, const struct ns__setBackup *, const char*, const char*);

#ifndef soap_write_ns__setBackup
#define soap_write_ns__setBackup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__setBackup(soap, data),0) || soap_put_ns__setBackup(soap, data, "ns:setBackup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__setBackup * SOAP_FMAC4 soap_get_ns__setBackup(struct soap*, struct ns__setBackup *, const char*, const char*);

#ifndef soap_read_ns__setBackup
#define soap_read_ns__setBackup(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__setBackup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__setBackup * SOAP_FMAC2 soap_instantiate_ns__setBackup(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__setBackup * soap_new_ns__setBackup(struct soap *soap, int n = -1) { return soap_instantiate_ns__setBackup(soap, n, NULL, NULL, NULL); }

inline struct ns__setBackup * soap_new_req_ns__setBackup(struct soap *soap, int mode, int timevalue, int capacityvalue) { struct ns__setBackup *_p = soap_instantiate_ns__setBackup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setBackup(soap, _p); _p->mode = mode; _p->timevalue = timevalue; _p->capacityvalue = capacityvalue; } return _p; }

inline struct ns__setBackup * soap_new_set_ns__setBackup(struct soap *soap, int mode, int timevalue, int capacityvalue) { struct ns__setBackup *_p = soap_instantiate_ns__setBackup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setBackup(soap, _p); _p->mode = mode; _p->timevalue = timevalue; _p->capacityvalue = capacityvalue; } return _p; }

inline void soap_delete_ns__setBackup(struct soap *soap, struct ns__setBackup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setBackup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__setBackupResponse
#define SOAP_TYPE_ns__setBackupResponse (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setBackupResponse(struct soap*, struct ns__setBackupResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setBackupResponse(struct soap*, const struct ns__setBackupResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setBackupResponse(struct soap*, const char*, int, const struct ns__setBackupResponse *, const char*);
SOAP_FMAC3 struct ns__setBackupResponse * SOAP_FMAC4 soap_in_ns__setBackupResponse(struct soap*, const char*, struct ns__setBackupResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setBackupResponse(struct soap*, const struct ns__setBackupResponse *, const char*, const char*);

#ifndef soap_write_ns__setBackupResponse
#define soap_write_ns__setBackupResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__setBackupResponse(soap, data),0) || soap_put_ns__setBackupResponse(soap, data, "ns:setBackupResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__setBackupResponse * SOAP_FMAC4 soap_get_ns__setBackupResponse(struct soap*, struct ns__setBackupResponse *, const char*, const char*);

#ifndef soap_read_ns__setBackupResponse
#define soap_read_ns__setBackupResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__setBackupResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__setBackupResponse * SOAP_FMAC2 soap_instantiate_ns__setBackupResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__setBackupResponse * soap_new_ns__setBackupResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__setBackupResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__setBackupResponse * soap_new_req_ns__setBackupResponse(struct soap *soap) { struct ns__setBackupResponse *_p = soap_instantiate_ns__setBackupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setBackupResponse(soap, _p); } return _p; }

inline struct ns__setBackupResponse * soap_new_set_ns__setBackupResponse(struct soap *soap, struct result_status *result) { struct ns__setBackupResponse *_p = soap_instantiate_ns__setBackupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setBackupResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__setBackupResponse(struct soap *soap, struct ns__setBackupResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setBackupResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__setWriterParam
#define SOAP_TYPE_ns__setWriterParam (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setWriterParam(struct soap*, struct ns__setWriterParam *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setWriterParam(struct soap*, const struct ns__setWriterParam *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setWriterParam(struct soap*, const char*, int, const struct ns__setWriterParam *, const char*);
SOAP_FMAC3 struct ns__setWriterParam * SOAP_FMAC4 soap_in_ns__setWriterParam(struct soap*, const char*, struct ns__setWriterParam *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setWriterParam(struct soap*, const struct ns__setWriterParam *, const char*, const char*);

#ifndef soap_write_ns__setWriterParam
#define soap_write_ns__setWriterParam(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__setWriterParam(soap, data),0) || soap_put_ns__setWriterParam(soap, data, "ns:setWriterParam", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__setWriterParam * SOAP_FMAC4 soap_get_ns__setWriterParam(struct soap*, struct ns__setWriterParam *, const char*, const char*);

#ifndef soap_read_ns__setWriterParam
#define soap_read_ns__setWriterParam(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__setWriterParam(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__setWriterParam * SOAP_FMAC2 soap_instantiate_ns__setWriterParam(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__setWriterParam * soap_new_ns__setWriterParam(struct soap *soap, int n = -1) { return soap_instantiate_ns__setWriterParam(soap, n, NULL, NULL, NULL); }

inline struct ns__setWriterParam * soap_new_req_ns__setWriterParam(struct soap *soap, int capacity, int writemode) { struct ns__setWriterParam *_p = soap_instantiate_ns__setWriterParam(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setWriterParam(soap, _p); _p->capacity = capacity; _p->writemode = writemode; } return _p; }

inline struct ns__setWriterParam * soap_new_set_ns__setWriterParam(struct soap *soap, int capacity, int writemode) { struct ns__setWriterParam *_p = soap_instantiate_ns__setWriterParam(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setWriterParam(soap, _p); _p->capacity = capacity; _p->writemode = writemode; } return _p; }

inline void soap_delete_ns__setWriterParam(struct soap *soap, struct ns__setWriterParam *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setWriterParam(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__setWriterParamResponse
#define SOAP_TYPE_ns__setWriterParamResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setWriterParamResponse(struct soap*, struct ns__setWriterParamResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setWriterParamResponse(struct soap*, const struct ns__setWriterParamResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setWriterParamResponse(struct soap*, const char*, int, const struct ns__setWriterParamResponse *, const char*);
SOAP_FMAC3 struct ns__setWriterParamResponse * SOAP_FMAC4 soap_in_ns__setWriterParamResponse(struct soap*, const char*, struct ns__setWriterParamResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setWriterParamResponse(struct soap*, const struct ns__setWriterParamResponse *, const char*, const char*);

#ifndef soap_write_ns__setWriterParamResponse
#define soap_write_ns__setWriterParamResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__setWriterParamResponse(soap, data),0) || soap_put_ns__setWriterParamResponse(soap, data, "ns:setWriterParamResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__setWriterParamResponse * SOAP_FMAC4 soap_get_ns__setWriterParamResponse(struct soap*, struct ns__setWriterParamResponse *, const char*, const char*);

#ifndef soap_read_ns__setWriterParamResponse
#define soap_read_ns__setWriterParamResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__setWriterParamResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__setWriterParamResponse * SOAP_FMAC2 soap_instantiate_ns__setWriterParamResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__setWriterParamResponse * soap_new_ns__setWriterParamResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__setWriterParamResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__setWriterParamResponse * soap_new_req_ns__setWriterParamResponse(struct soap *soap) { struct ns__setWriterParamResponse *_p = soap_instantiate_ns__setWriterParamResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setWriterParamResponse(soap, _p); } return _p; }

inline struct ns__setWriterParamResponse * soap_new_set_ns__setWriterParamResponse(struct soap *soap, struct result_status *result) { struct ns__setWriterParamResponse *_p = soap_instantiate_ns__setWriterParamResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__setWriterParamResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__setWriterParamResponse(struct soap *soap, struct ns__setWriterParamResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setWriterParamResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__stoprecord
#define SOAP_TYPE_ns__stoprecord (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stoprecord(struct soap*, struct ns__stoprecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stoprecord(struct soap*, const struct ns__stoprecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stoprecord(struct soap*, const char*, int, const struct ns__stoprecord *, const char*);
SOAP_FMAC3 struct ns__stoprecord * SOAP_FMAC4 soap_in_ns__stoprecord(struct soap*, const char*, struct ns__stoprecord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stoprecord(struct soap*, const struct ns__stoprecord *, const char*, const char*);

#ifndef soap_write_ns__stoprecord
#define soap_write_ns__stoprecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__stoprecord(soap, data),0) || soap_put_ns__stoprecord(soap, data, "ns:stoprecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__stoprecord * SOAP_FMAC4 soap_get_ns__stoprecord(struct soap*, struct ns__stoprecord *, const char*, const char*);

#ifndef soap_read_ns__stoprecord
#define soap_read_ns__stoprecord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__stoprecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__stoprecord * SOAP_FMAC2 soap_instantiate_ns__stoprecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__stoprecord * soap_new_ns__stoprecord(struct soap *soap, int n = -1) { return soap_instantiate_ns__stoprecord(soap, n, NULL, NULL, NULL); }

inline struct ns__stoprecord * soap_new_req_ns__stoprecord(struct soap *soap) { struct ns__stoprecord *_p = soap_instantiate_ns__stoprecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stoprecord(soap, _p); } return _p; }

inline struct ns__stoprecord * soap_new_set_ns__stoprecord(struct soap *soap, char *videostreamid) { struct ns__stoprecord *_p = soap_instantiate_ns__stoprecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stoprecord(soap, _p); _p->videostreamid = videostreamid; } return _p; }

inline void soap_delete_ns__stoprecord(struct soap *soap, struct ns__stoprecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stoprecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__stoprecordResponse
#define SOAP_TYPE_ns__stoprecordResponse (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stoprecordResponse(struct soap*, struct ns__stoprecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stoprecordResponse(struct soap*, const struct ns__stoprecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stoprecordResponse(struct soap*, const char*, int, const struct ns__stoprecordResponse *, const char*);
SOAP_FMAC3 struct ns__stoprecordResponse * SOAP_FMAC4 soap_in_ns__stoprecordResponse(struct soap*, const char*, struct ns__stoprecordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stoprecordResponse(struct soap*, const struct ns__stoprecordResponse *, const char*, const char*);

#ifndef soap_write_ns__stoprecordResponse
#define soap_write_ns__stoprecordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__stoprecordResponse(soap, data),0) || soap_put_ns__stoprecordResponse(soap, data, "ns:stoprecordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__stoprecordResponse * SOAP_FMAC4 soap_get_ns__stoprecordResponse(struct soap*, struct ns__stoprecordResponse *, const char*, const char*);

#ifndef soap_read_ns__stoprecordResponse
#define soap_read_ns__stoprecordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__stoprecordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__stoprecordResponse * SOAP_FMAC2 soap_instantiate_ns__stoprecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__stoprecordResponse * soap_new_ns__stoprecordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__stoprecordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__stoprecordResponse * soap_new_req_ns__stoprecordResponse(struct soap *soap) { struct ns__stoprecordResponse *_p = soap_instantiate_ns__stoprecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stoprecordResponse(soap, _p); } return _p; }

inline struct ns__stoprecordResponse * soap_new_set_ns__stoprecordResponse(struct soap *soap, struct result_status *result) { struct ns__stoprecordResponse *_p = soap_instantiate_ns__stoprecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stoprecordResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__stoprecordResponse(struct soap *soap, struct ns__stoprecordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stoprecordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__startrecord
#define SOAP_TYPE_ns__startrecord (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__startrecord(struct soap*, struct ns__startrecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__startrecord(struct soap*, const struct ns__startrecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__startrecord(struct soap*, const char*, int, const struct ns__startrecord *, const char*);
SOAP_FMAC3 struct ns__startrecord * SOAP_FMAC4 soap_in_ns__startrecord(struct soap*, const char*, struct ns__startrecord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__startrecord(struct soap*, const struct ns__startrecord *, const char*, const char*);

#ifndef soap_write_ns__startrecord
#define soap_write_ns__startrecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__startrecord(soap, data),0) || soap_put_ns__startrecord(soap, data, "ns:startrecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__startrecord * SOAP_FMAC4 soap_get_ns__startrecord(struct soap*, struct ns__startrecord *, const char*, const char*);

#ifndef soap_read_ns__startrecord
#define soap_read_ns__startrecord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__startrecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__startrecord * SOAP_FMAC2 soap_instantiate_ns__startrecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__startrecord * soap_new_ns__startrecord(struct soap *soap, int n = -1) { return soap_instantiate_ns__startrecord(soap, n, NULL, NULL, NULL); }

inline struct ns__startrecord * soap_new_req_ns__startrecord(struct soap *soap, int recordmode, int duration) { struct ns__startrecord *_p = soap_instantiate_ns__startrecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startrecord(soap, _p); _p->recordmode = recordmode; _p->duration = duration; } return _p; }

inline struct ns__startrecord * soap_new_set_ns__startrecord(struct soap *soap, char *videostreamid, char *videostreamurl, int recordmode, int duration) { struct ns__startrecord *_p = soap_instantiate_ns__startrecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startrecord(soap, _p); _p->videostreamid = videostreamid; _p->videostreamurl = videostreamurl; _p->recordmode = recordmode; _p->duration = duration; } return _p; }

inline void soap_delete_ns__startrecord(struct soap *soap, struct ns__startrecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__startrecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__startrecordResponse
#define SOAP_TYPE_ns__startrecordResponse (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__startrecordResponse(struct soap*, struct ns__startrecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__startrecordResponse(struct soap*, const struct ns__startrecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__startrecordResponse(struct soap*, const char*, int, const struct ns__startrecordResponse *, const char*);
SOAP_FMAC3 struct ns__startrecordResponse * SOAP_FMAC4 soap_in_ns__startrecordResponse(struct soap*, const char*, struct ns__startrecordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__startrecordResponse(struct soap*, const struct ns__startrecordResponse *, const char*, const char*);

#ifndef soap_write_ns__startrecordResponse
#define soap_write_ns__startrecordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__startrecordResponse(soap, data),0) || soap_put_ns__startrecordResponse(soap, data, "ns:startrecordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__startrecordResponse * SOAP_FMAC4 soap_get_ns__startrecordResponse(struct soap*, struct ns__startrecordResponse *, const char*, const char*);

#ifndef soap_read_ns__startrecordResponse
#define soap_read_ns__startrecordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__startrecordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__startrecordResponse * SOAP_FMAC2 soap_instantiate_ns__startrecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__startrecordResponse * soap_new_ns__startrecordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__startrecordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__startrecordResponse * soap_new_req_ns__startrecordResponse(struct soap *soap) { struct ns__startrecordResponse *_p = soap_instantiate_ns__startrecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startrecordResponse(soap, _p); } return _p; }

inline struct ns__startrecordResponse * soap_new_set_ns__startrecordResponse(struct soap *soap, struct result_status *result) { struct ns__startrecordResponse *_p = soap_instantiate_ns__startrecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__startrecordResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__startrecordResponse(struct soap *soap, struct ns__startrecordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__startrecordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_result_status
#define SOAP_TYPE_result_status (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_result_status(struct soap*, struct result_status *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_result_status(struct soap*, const struct result_status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_result_status(struct soap*, const char*, int, const struct result_status *, const char*);
SOAP_FMAC3 struct result_status * SOAP_FMAC4 soap_in_result_status(struct soap*, const char*, struct result_status *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_result_status(struct soap*, const struct result_status *, const char*, const char*);

#ifndef soap_write_result_status
#define soap_write_result_status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_result_status(soap, data),0) || soap_put_result_status(soap, data, "result-status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct result_status * SOAP_FMAC4 soap_get_result_status(struct soap*, struct result_status *, const char*, const char*);

#ifndef soap_read_result_status
#define soap_read_result_status(soap, data) ( soap_begin_recv(soap) || !soap_get_result_status(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct result_status * SOAP_FMAC2 soap_instantiate_result_status(struct soap*, int, const char*, const char*, size_t*);

inline struct result_status * soap_new_result_status(struct soap *soap, int n = -1) { return soap_instantiate_result_status(soap, n, NULL, NULL, NULL); }

inline struct result_status * soap_new_req_result_status(struct soap *soap, int errorid) { struct result_status *_p = soap_instantiate_result_status(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_result_status(soap, _p); _p->errorid = errorid; } return _p; }

inline struct result_status * soap_new_set_result_status(struct soap *soap, int errorid, char *errordesc) { struct result_status *_p = soap_instantiate_result_status(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_result_status(soap, _p); _p->errorid = errorid; _p->errordesc = errordesc; } return _p; }

inline void soap_delete_result_status(struct soap *soap, struct result_status *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_result_status(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToresult_status
#define SOAP_TYPE_PointerToresult_status (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToresult_status(struct soap*, struct result_status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToresult_status(struct soap*, const char *, int, struct result_status *const*, const char *);
SOAP_FMAC3 struct result_status ** SOAP_FMAC4 soap_in_PointerToresult_status(struct soap*, const char*, struct result_status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToresult_status(struct soap*, struct result_status *const*, const char*, const char*);

#ifndef soap_write_PointerToresult_status
#define soap_write_PointerToresult_status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToresult_status(soap, data),0) || soap_put_PointerToresult_status(soap, data, "result-status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct result_status ** SOAP_FMAC4 soap_get_PointerToresult_status(struct soap*, struct result_status **, const char*, const char*);

#ifndef soap_read_PointerToresult_status
#define soap_read_PointerToresult_status(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToresult_status(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
