/* soapvideooverlayProxy.cpp
   Generated by gSOAP 2.8.17r from videooverlayws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapvideooverlayProxy.h"

videooverlayProxy::videooverlayProxy()
{	videooverlayProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

videooverlayProxy::videooverlayProxy(const struct soap &_soap) : soap(_soap)
{ }

videooverlayProxy::videooverlayProxy(const char *url)
{	videooverlayProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

videooverlayProxy::videooverlayProxy(soap_mode iomode)
{	videooverlayProxy_init(iomode, iomode);
}

videooverlayProxy::videooverlayProxy(const char *url, soap_mode iomode)
{	videooverlayProxy_init(iomode, iomode);
	soap_endpoint = url;
}

videooverlayProxy::videooverlayProxy(soap_mode imode, soap_mode omode)
{	videooverlayProxy_init(imode, omode);
}

videooverlayProxy::~videooverlayProxy()
{ }

void videooverlayProxy::videooverlayProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:voverlay", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void videooverlayProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void videooverlayProxy::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	videooverlayProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void videooverlayProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *videooverlayProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *videooverlayProxy::soap_fault()
{	return this->fault;
}

const char *videooverlayProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *videooverlayProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int videooverlayProxy::soap_close_socket()
{	return soap_closesock(this);
}

int videooverlayProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void videooverlayProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void videooverlayProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *videooverlayProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int videooverlayProxy::addsource(const char *endpoint, const char *soap_action, char *sourceurl, char *sourcename, struct voverlay_add_source_result *result)
{	struct soap *soap = this;
	struct ns__addsource soap_tmp_ns__addsource;
	struct ns__addsourceResponse *soap_tmp_ns__addsourceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://locahost:port";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__addsource.sourceurl = sourceurl;
	soap_tmp_ns__addsource.sourcename = sourcename;
	soap_serializeheader(soap);
	soap_serialize_ns__addsource(soap, &soap_tmp_ns__addsource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addsource(soap, &soap_tmp_ns__addsource, "ns:addsource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addsource(soap, &soap_tmp_ns__addsource, "ns:addsource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_voverlay_add_source_result(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__addsourceResponse = soap_get_ns__addsourceResponse(soap, NULL, "", "");
	if (!soap_tmp_ns__addsourceResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__addsourceResponse->result)
		*result = *soap_tmp_ns__addsourceResponse->result;
	return soap_closesock(soap);
}

int videooverlayProxy::delsource(const char *endpoint, const char *soap_action, char *sourceurl, struct soap_overlay_status *result)
{	struct soap *soap = this;
	struct ns__delsource soap_tmp_ns__delsource;
	struct ns__delsourceResponse *soap_tmp_ns__delsourceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://locahost:port";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__delsource.sourceurl = sourceurl;
	soap_serializeheader(soap);
	soap_serialize_ns__delsource(soap, &soap_tmp_ns__delsource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__delsource(soap, &soap_tmp_ns__delsource, "ns:delsource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__delsource(soap, &soap_tmp_ns__delsource, "ns:delsource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_soap_overlay_status(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__delsourceResponse = soap_get_ns__delsourceResponse(soap, NULL, "", "");
	if (!soap_tmp_ns__delsourceResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__delsourceResponse->result)
		*result = *soap_tmp_ns__delsourceResponse->result;
	return soap_closesock(soap);
}

int videooverlayProxy::runsource(const char *endpoint, const char *soap_action, int command, char *sourceurl, struct soap_overlay_status *result)
{	struct soap *soap = this;
	struct ns__runsource soap_tmp_ns__runsource;
	struct ns__runsourceResponse *soap_tmp_ns__runsourceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://locahost:port";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__runsource.command = command;
	soap_tmp_ns__runsource.sourceurl = sourceurl;
	soap_serializeheader(soap);
	soap_serialize_ns__runsource(soap, &soap_tmp_ns__runsource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__runsource(soap, &soap_tmp_ns__runsource, "ns:runsource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__runsource(soap, &soap_tmp_ns__runsource, "ns:runsource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_soap_overlay_status(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__runsourceResponse = soap_get_ns__runsourceResponse(soap, NULL, "", "");
	if (!soap_tmp_ns__runsourceResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__runsourceResponse->result)
		*result = *soap_tmp_ns__runsourceResponse->result;
	return soap_closesock(soap);
}

int videooverlayProxy::runserver(const char *endpoint, const char *soap_action, int command, struct soap_overlay_status *result)
{	struct soap *soap = this;
	struct ns__runserver soap_tmp_ns__runserver;
	struct ns__runserverResponse *soap_tmp_ns__runserverResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://locahost:port";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__runserver.command = command;
	soap_serializeheader(soap);
	soap_serialize_ns__runserver(soap, &soap_tmp_ns__runserver);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__runserver(soap, &soap_tmp_ns__runserver, "ns:runserver", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__runserver(soap, &soap_tmp_ns__runserver, "ns:runserver", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_soap_overlay_status(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__runserverResponse = soap_get_ns__runserverResponse(soap, NULL, "", "");
	if (!soap_tmp_ns__runserverResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__runserverResponse->result)
		*result = *soap_tmp_ns__runserverResponse->result;
	return soap_closesock(soap);
}

int videooverlayProxy::settextposition(const char *endpoint, const char *soap_action, int lanepos, int staffpos, int classpos, int licensenumberpos, int pricepos, int timestamppos, struct soap_overlay_status *result)
{	struct soap *soap = this;
	struct ns__settextposition soap_tmp_ns__settextposition;
	struct ns__settextpositionResponse *soap_tmp_ns__settextpositionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://locahost:port";
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_tmp_ns__settextposition.lanepos = lanepos;
	soap_tmp_ns__settextposition.staffpos = staffpos;
	soap_tmp_ns__settextposition.classpos = classpos;
	soap_tmp_ns__settextposition.licensenumberpos = licensenumberpos;
	soap_tmp_ns__settextposition.pricepos = pricepos;
	soap_tmp_ns__settextposition.timestamppos = timestamppos;
	soap_serializeheader(soap);
	soap_serialize_ns__settextposition(soap, &soap_tmp_ns__settextposition);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__settextposition(soap, &soap_tmp_ns__settextposition, "ns:settextposition", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__settextposition(soap, &soap_tmp_ns__settextposition, "ns:settextposition", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_soap_overlay_status(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__settextpositionResponse = soap_get_ns__settextpositionResponse(soap, NULL, "", "");
	if (!soap_tmp_ns__settextpositionResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__settextpositionResponse->result)
		*result = *soap_tmp_ns__settextpositionResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
