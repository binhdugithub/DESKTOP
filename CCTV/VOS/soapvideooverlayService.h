/* soapvideooverlayService.h
   Generated by gSOAP 2.8.17r from videooverlayws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapvideooverlayService_H
#define soapvideooverlayService_H
#include "soapH.h"
class SOAP_CMAC videooverlayService : public soap
{ public:
	/// Constructor
	videooverlayService();
	/// Construct from another engine state
	videooverlayService(const struct soap&);
	/// Constructor with engine input+output mode control
	videooverlayService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	videooverlayService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~videooverlayService();
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to defaults
	virtual	void reset();
	/// Initializer used by constructor
	virtual	void videooverlayService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	videooverlayService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept();
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'addsource' (returns error code or SOAP_OK)
	virtual	int addsource(char *sourceurl, char *sourcename, struct voverlay_add_source_result *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'delsource' (returns error code or SOAP_OK)
	virtual	int delsource(char *sourceurl, struct soap_overlay_status *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'runsource' (returns error code or SOAP_OK)
	virtual	int runsource(int command, char *sourceurl, struct soap_overlay_status *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'runserver' (returns error code or SOAP_OK)
	virtual	int runserver(int command, struct soap_overlay_status *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'settextposition' (returns error code or SOAP_OK)
	virtual	int settextposition(int lanepos, int staffpos, int classpos, int licensenumberpos, int pricepos, int timestamppos, struct soap_overlay_status *result) SOAP_PURE_VIRTUAL;
};
#endif
