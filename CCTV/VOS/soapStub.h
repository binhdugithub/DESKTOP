/* soapStub.h
   Generated by gSOAP 2.8.17r from videooverlayws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_soap_overlay_status
#define SOAP_TYPE_soap_overlay_status (7)
/* soap-overlay-status */
struct soap_overlay_status
{
public:
	int errorid;	/* required element of type xsd:int */
	char *errordesc;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 7; } /* = unique type id SOAP_TYPE_soap_overlay_status */
};
#endif

#ifndef SOAP_TYPE_voverlay_add_source_result
#define SOAP_TYPE_voverlay_add_source_result (8)
/* voverlay-add-source-result */
struct voverlay_add_source_result
{
public:
	struct soap_overlay_status state;	/* required element of type soap-overlay-status */
	char *output_url;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_voverlay_add_source_result */
};
#endif

#ifndef SOAP_TYPE_ns__addsourceResponse
#define SOAP_TYPE_ns__addsourceResponse (11)
/* ns:addsourceResponse */
struct ns__addsourceResponse
{
public:
	struct voverlay_add_source_result *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type voverlay-add-source-result */
public:
	int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_ns__addsourceResponse */
};
#endif

#ifndef SOAP_TYPE_ns__addsource
#define SOAP_TYPE_ns__addsource (12)
/* ns:addsource */
struct ns__addsource
{
public:
	char *sourceurl;	/* optional element of type xsd:string */
	char *sourcename;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_ns__addsource */
};
#endif

#ifndef SOAP_TYPE_ns__delsourceResponse
#define SOAP_TYPE_ns__delsourceResponse (15)
/* ns:delsourceResponse */
struct ns__delsourceResponse
{
public:
	struct soap_overlay_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type soap-overlay-status */
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_ns__delsourceResponse */
};
#endif

#ifndef SOAP_TYPE_ns__delsource
#define SOAP_TYPE_ns__delsource (16)
/* ns:delsource */
struct ns__delsource
{
public:
	char *sourceurl;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_ns__delsource */
};
#endif

#ifndef SOAP_TYPE_ns__runsourceResponse
#define SOAP_TYPE_ns__runsourceResponse (18)
/* ns:runsourceResponse */
struct ns__runsourceResponse
{
public:
	struct soap_overlay_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type soap-overlay-status */
public:
	int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_ns__runsourceResponse */
};
#endif

#ifndef SOAP_TYPE_ns__runsource
#define SOAP_TYPE_ns__runsource (19)
/* ns:runsource */
struct ns__runsource
{
public:
	int command;	/* required element of type xsd:int */
	char *sourceurl;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 19; } /* = unique type id SOAP_TYPE_ns__runsource */
};
#endif

#ifndef SOAP_TYPE_ns__runserverResponse
#define SOAP_TYPE_ns__runserverResponse (21)
/* ns:runserverResponse */
struct ns__runserverResponse
{
public:
	struct soap_overlay_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type soap-overlay-status */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_ns__runserverResponse */
};
#endif

#ifndef SOAP_TYPE_ns__runserver
#define SOAP_TYPE_ns__runserver (22)
/* ns:runserver */
struct ns__runserver
{
public:
	int command;	/* required element of type xsd:int */
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_ns__runserver */
};
#endif

#ifndef SOAP_TYPE_ns__settextpositionResponse
#define SOAP_TYPE_ns__settextpositionResponse (24)
/* ns:settextpositionResponse */
struct ns__settextpositionResponse
{
public:
	struct soap_overlay_status *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type soap-overlay-status */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_ns__settextpositionResponse */
};
#endif

#ifndef SOAP_TYPE_ns__settextposition
#define SOAP_TYPE_ns__settextposition (25)
/* ns:settextposition */
struct ns__settextposition
{
public:
	int lanepos;	/* required element of type xsd:int */
	int staffpos;	/* required element of type xsd:int */
	int classpos;	/* required element of type xsd:int */
	int licensenumberpos;	/* required element of type xsd:int */
	int pricepos;	/* required element of type xsd:int */
	int timestamppos;	/* required element of type xsd:int */
public:
	int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_ns__settextposition */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (26)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (27)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (29)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (32)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (33)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
