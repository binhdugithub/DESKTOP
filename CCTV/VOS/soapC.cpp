/* soapC.cpp
   Generated by gSOAP 2.8.17r from videooverlayws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17r 2014-07-28 06:45:21 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns__settextposition:
		return soap_in_ns__settextposition(soap, NULL, NULL, "ns:settextposition");
	case SOAP_TYPE_ns__settextpositionResponse:
		return soap_in_ns__settextpositionResponse(soap, NULL, NULL, "ns:settextpositionResponse");
	case SOAP_TYPE_ns__runserver:
		return soap_in_ns__runserver(soap, NULL, NULL, "ns:runserver");
	case SOAP_TYPE_ns__runserverResponse:
		return soap_in_ns__runserverResponse(soap, NULL, NULL, "ns:runserverResponse");
	case SOAP_TYPE_ns__runsource:
		return soap_in_ns__runsource(soap, NULL, NULL, "ns:runsource");
	case SOAP_TYPE_ns__runsourceResponse:
		return soap_in_ns__runsourceResponse(soap, NULL, NULL, "ns:runsourceResponse");
	case SOAP_TYPE_ns__delsource:
		return soap_in_ns__delsource(soap, NULL, NULL, "ns:delsource");
	case SOAP_TYPE_ns__delsourceResponse:
		return soap_in_ns__delsourceResponse(soap, NULL, NULL, "ns:delsourceResponse");
	case SOAP_TYPE_ns__addsource:
		return soap_in_ns__addsource(soap, NULL, NULL, "ns:addsource");
	case SOAP_TYPE_ns__addsourceResponse:
		return soap_in_ns__addsourceResponse(soap, NULL, NULL, "ns:addsourceResponse");
	case SOAP_TYPE_voverlay_add_source_result:
		return soap_in_voverlay_add_source_result(soap, NULL, NULL, "voverlay-add-source-result");
	case SOAP_TYPE_soap_overlay_status:
		return soap_in_soap_overlay_status(soap, NULL, NULL, "soap-overlay-status");
	case SOAP_TYPE_PointerTosoap_overlay_status:
		return soap_in_PointerTosoap_overlay_status(soap, NULL, NULL, "soap-overlay-status");
	case SOAP_TYPE_PointerTovoverlay_add_source_result:
		return soap_in_PointerTovoverlay_add_source_result(soap, NULL, NULL, "voverlay-add-source-result");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:settextposition"))
		{	*type = SOAP_TYPE_ns__settextposition;
			return soap_in_ns__settextposition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:settextpositionResponse"))
		{	*type = SOAP_TYPE_ns__settextpositionResponse;
			return soap_in_ns__settextpositionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:runserver"))
		{	*type = SOAP_TYPE_ns__runserver;
			return soap_in_ns__runserver(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:runserverResponse"))
		{	*type = SOAP_TYPE_ns__runserverResponse;
			return soap_in_ns__runserverResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:runsource"))
		{	*type = SOAP_TYPE_ns__runsource;
			return soap_in_ns__runsource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:runsourceResponse"))
		{	*type = SOAP_TYPE_ns__runsourceResponse;
			return soap_in_ns__runsourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:delsource"))
		{	*type = SOAP_TYPE_ns__delsource;
			return soap_in_ns__delsource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:delsourceResponse"))
		{	*type = SOAP_TYPE_ns__delsourceResponse;
			return soap_in_ns__delsourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addsource"))
		{	*type = SOAP_TYPE_ns__addsource;
			return soap_in_ns__addsource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addsourceResponse"))
		{	*type = SOAP_TYPE_ns__addsourceResponse;
			return soap_in_ns__addsourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "voverlay-add-source-result"))
		{	*type = SOAP_TYPE_voverlay_add_source_result;
			return soap_in_voverlay_add_source_result(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-overlay-status"))
		{	*type = SOAP_TYPE_soap_overlay_status;
			return soap_in_soap_overlay_status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns__settextposition:
		return soap_out_ns__settextposition(soap, tag, id, (const struct ns__settextposition *)ptr, "ns:settextposition");
	case SOAP_TYPE_ns__settextpositionResponse:
		return soap_out_ns__settextpositionResponse(soap, tag, id, (const struct ns__settextpositionResponse *)ptr, "ns:settextpositionResponse");
	case SOAP_TYPE_ns__runserver:
		return soap_out_ns__runserver(soap, tag, id, (const struct ns__runserver *)ptr, "ns:runserver");
	case SOAP_TYPE_ns__runserverResponse:
		return soap_out_ns__runserverResponse(soap, tag, id, (const struct ns__runserverResponse *)ptr, "ns:runserverResponse");
	case SOAP_TYPE_ns__runsource:
		return soap_out_ns__runsource(soap, tag, id, (const struct ns__runsource *)ptr, "ns:runsource");
	case SOAP_TYPE_ns__runsourceResponse:
		return soap_out_ns__runsourceResponse(soap, tag, id, (const struct ns__runsourceResponse *)ptr, "ns:runsourceResponse");
	case SOAP_TYPE_ns__delsource:
		return soap_out_ns__delsource(soap, tag, id, (const struct ns__delsource *)ptr, "ns:delsource");
	case SOAP_TYPE_ns__delsourceResponse:
		return soap_out_ns__delsourceResponse(soap, tag, id, (const struct ns__delsourceResponse *)ptr, "ns:delsourceResponse");
	case SOAP_TYPE_ns__addsource:
		return soap_out_ns__addsource(soap, tag, id, (const struct ns__addsource *)ptr, "ns:addsource");
	case SOAP_TYPE_ns__addsourceResponse:
		return soap_out_ns__addsourceResponse(soap, tag, id, (const struct ns__addsourceResponse *)ptr, "ns:addsourceResponse");
	case SOAP_TYPE_voverlay_add_source_result:
		return soap_out_voverlay_add_source_result(soap, tag, id, (const struct voverlay_add_source_result *)ptr, "voverlay-add-source-result");
	case SOAP_TYPE_soap_overlay_status:
		return soap_out_soap_overlay_status(soap, tag, id, (const struct soap_overlay_status *)ptr, "soap-overlay-status");
	case SOAP_TYPE_PointerTosoap_overlay_status:
		return soap_out_PointerTosoap_overlay_status(soap, tag, id, (struct soap_overlay_status *const*)ptr, "soap-overlay-status");
	case SOAP_TYPE_PointerTovoverlay_add_source_result:
		return soap_out_PointerTovoverlay_add_source_result(soap, tag, id, (struct voverlay_add_source_result *const*)ptr, "voverlay-add-source-result");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__settextposition:
		soap_serialize_ns__settextposition(soap, (const struct ns__settextposition *)ptr);
		break;
	case SOAP_TYPE_ns__settextpositionResponse:
		soap_serialize_ns__settextpositionResponse(soap, (const struct ns__settextpositionResponse *)ptr);
		break;
	case SOAP_TYPE_ns__runserver:
		soap_serialize_ns__runserver(soap, (const struct ns__runserver *)ptr);
		break;
	case SOAP_TYPE_ns__runserverResponse:
		soap_serialize_ns__runserverResponse(soap, (const struct ns__runserverResponse *)ptr);
		break;
	case SOAP_TYPE_ns__runsource:
		soap_serialize_ns__runsource(soap, (const struct ns__runsource *)ptr);
		break;
	case SOAP_TYPE_ns__runsourceResponse:
		soap_serialize_ns__runsourceResponse(soap, (const struct ns__runsourceResponse *)ptr);
		break;
	case SOAP_TYPE_ns__delsource:
		soap_serialize_ns__delsource(soap, (const struct ns__delsource *)ptr);
		break;
	case SOAP_TYPE_ns__delsourceResponse:
		soap_serialize_ns__delsourceResponse(soap, (const struct ns__delsourceResponse *)ptr);
		break;
	case SOAP_TYPE_ns__addsource:
		soap_serialize_ns__addsource(soap, (const struct ns__addsource *)ptr);
		break;
	case SOAP_TYPE_ns__addsourceResponse:
		soap_serialize_ns__addsourceResponse(soap, (const struct ns__addsourceResponse *)ptr);
		break;
	case SOAP_TYPE_voverlay_add_source_result:
		soap_serialize_voverlay_add_source_result(soap, (const struct voverlay_add_source_result *)ptr);
		break;
	case SOAP_TYPE_soap_overlay_status:
		soap_serialize_soap_overlay_status(soap, (const struct soap_overlay_status *)ptr);
		break;
	case SOAP_TYPE_PointerTosoap_overlay_status:
		soap_serialize_PointerTosoap_overlay_status(soap, (struct soap_overlay_status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTovoverlay_add_source_result:
		soap_serialize_PointerTovoverlay_add_source_result(soap, (struct voverlay_add_source_result *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_soap_overlay_status:
		return (void*)soap_instantiate_soap_overlay_status(soap, -1, type, arrayType, n);
	case SOAP_TYPE_voverlay_add_source_result:
		return (void*)soap_instantiate_voverlay_add_source_result(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addsourceResponse:
		return (void*)soap_instantiate_ns__addsourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addsource:
		return (void*)soap_instantiate_ns__addsource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__delsourceResponse:
		return (void*)soap_instantiate_ns__delsourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__delsource:
		return (void*)soap_instantiate_ns__delsource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__runsourceResponse:
		return (void*)soap_instantiate_ns__runsourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__runsource:
		return (void*)soap_instantiate_ns__runsource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__runserverResponse:
		return (void*)soap_instantiate_ns__runserverResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__runserver:
		return (void*)soap_instantiate_ns__runserver(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__settextpositionResponse:
		return (void*)soap_instantiate_ns__settextpositionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__settextposition:
		return (void*)soap_instantiate_ns__settextposition(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_soap_overlay_status:
		if (p->size < 0)
			SOAP_DELETE((struct soap_overlay_status*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct soap_overlay_status*)p->ptr);
		break;
	case SOAP_TYPE_voverlay_add_source_result:
		if (p->size < 0)
			SOAP_DELETE((struct voverlay_add_source_result*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct voverlay_add_source_result*)p->ptr);
		break;
	case SOAP_TYPE_ns__addsourceResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addsourceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addsourceResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__addsource:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addsource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addsource*)p->ptr);
		break;
	case SOAP_TYPE_ns__delsourceResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__delsourceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__delsourceResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__delsource:
		if (p->size < 0)
			SOAP_DELETE((struct ns__delsource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__delsource*)p->ptr);
		break;
	case SOAP_TYPE_ns__runsourceResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__runsourceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__runsourceResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__runsource:
		if (p->size < 0)
			SOAP_DELETE((struct ns__runsource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__runsource*)p->ptr);
		break;
	case SOAP_TYPE_ns__runserverResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__runserverResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__runserverResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__runserver:
		if (p->size < 0)
			SOAP_DELETE((struct ns__runserver*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__runserver*)p->ptr);
		break;
	case SOAP_TYPE_ns__settextpositionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__settextpositionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__settextpositionResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__settextposition:
		if (p->size < 0)
			SOAP_DELETE((struct ns__settextposition*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__settextposition*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__settextposition(struct soap *soap, struct ns__settextposition *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->lanepos);
	soap_default_int(soap, &a->staffpos);
	soap_default_int(soap, &a->classpos);
	soap_default_int(soap, &a->licensenumberpos);
	soap_default_int(soap, &a->pricepos);
	soap_default_int(soap, &a->timestamppos);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__settextposition(struct soap *soap, const struct ns__settextposition *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__settextposition(struct soap *soap, const char *tag, int id, const struct ns__settextposition *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__settextposition), type))
		return soap->error;
	if (soap_out_int(soap, "lanepos", -1, &a->lanepos, ""))
		return soap->error;
	if (soap_out_int(soap, "staffpos", -1, &a->staffpos, ""))
		return soap->error;
	if (soap_out_int(soap, "classpos", -1, &a->classpos, ""))
		return soap->error;
	if (soap_out_int(soap, "licensenumberpos", -1, &a->licensenumberpos, ""))
		return soap->error;
	if (soap_out_int(soap, "pricepos", -1, &a->pricepos, ""))
		return soap->error;
	if (soap_out_int(soap, "timestamppos", -1, &a->timestamppos, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__settextposition * SOAP_FMAC4 soap_in_ns__settextposition(struct soap *soap, const char *tag, struct ns__settextposition *a, const char *type)
{
	size_t soap_flag_lanepos = 1;
	size_t soap_flag_staffpos = 1;
	size_t soap_flag_classpos = 1;
	size_t soap_flag_licensenumberpos = 1;
	size_t soap_flag_pricepos = 1;
	size_t soap_flag_timestamppos = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__settextposition *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__settextposition, sizeof(struct ns__settextposition), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__settextposition(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lanepos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "lanepos", &a->lanepos, "xsd:int"))
				{	soap_flag_lanepos--;
					continue;
				}
			if (soap_flag_staffpos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "staffpos", &a->staffpos, "xsd:int"))
				{	soap_flag_staffpos--;
					continue;
				}
			if (soap_flag_classpos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "classpos", &a->classpos, "xsd:int"))
				{	soap_flag_classpos--;
					continue;
				}
			if (soap_flag_licensenumberpos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "licensenumberpos", &a->licensenumberpos, "xsd:int"))
				{	soap_flag_licensenumberpos--;
					continue;
				}
			if (soap_flag_pricepos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "pricepos", &a->pricepos, "xsd:int"))
				{	soap_flag_pricepos--;
					continue;
				}
			if (soap_flag_timestamppos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "timestamppos", &a->timestamppos, "xsd:int"))
				{	soap_flag_timestamppos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__settextposition *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__settextposition, 0, sizeof(struct ns__settextposition), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lanepos > 0 || soap_flag_staffpos > 0 || soap_flag_classpos > 0 || soap_flag_licensenumberpos > 0 || soap_flag_pricepos > 0 || soap_flag_timestamppos > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__settextposition(struct soap *soap, const struct ns__settextposition *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__settextposition);
	if (soap_out_ns__settextposition(soap, tag?tag:"ns:settextposition", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__settextposition * SOAP_FMAC4 soap_get_ns__settextposition(struct soap *soap, struct ns__settextposition *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__settextposition(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__settextposition * SOAP_FMAC2 soap_instantiate_ns__settextposition(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__settextposition(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__settextposition, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__settextposition);
		if (size)
			*size = sizeof(struct ns__settextposition);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__settextposition, n);
		if (size)
			*size = n * sizeof(struct ns__settextposition);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__settextposition*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__settextposition(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__settextposition %p -> %p\n", q, p));
	*(struct ns__settextposition*)p = *(struct ns__settextposition*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__settextpositionResponse(struct soap *soap, struct ns__settextpositionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__settextpositionResponse(struct soap *soap, const struct ns__settextpositionResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTosoap_overlay_status(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__settextpositionResponse(struct soap *soap, const char *tag, int id, const struct ns__settextpositionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__settextpositionResponse), type))
		return soap->error;
	if (soap_out_PointerTosoap_overlay_status(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__settextpositionResponse * SOAP_FMAC4 soap_in_ns__settextpositionResponse(struct soap *soap, const char *tag, struct ns__settextpositionResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__settextpositionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__settextpositionResponse, sizeof(struct ns__settextpositionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__settextpositionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTosoap_overlay_status(soap, "result", &a->result, "soap-overlay-status"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__settextpositionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__settextpositionResponse, 0, sizeof(struct ns__settextpositionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__settextpositionResponse(struct soap *soap, const struct ns__settextpositionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__settextpositionResponse);
	if (soap_out_ns__settextpositionResponse(soap, tag?tag:"ns:settextpositionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__settextpositionResponse * SOAP_FMAC4 soap_get_ns__settextpositionResponse(struct soap *soap, struct ns__settextpositionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__settextpositionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__settextpositionResponse * SOAP_FMAC2 soap_instantiate_ns__settextpositionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__settextpositionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__settextpositionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__settextpositionResponse);
		if (size)
			*size = sizeof(struct ns__settextpositionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__settextpositionResponse, n);
		if (size)
			*size = n * sizeof(struct ns__settextpositionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__settextpositionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__settextpositionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__settextpositionResponse %p -> %p\n", q, p));
	*(struct ns__settextpositionResponse*)p = *(struct ns__settextpositionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runserver(struct soap *soap, struct ns__runserver *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->command);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runserver(struct soap *soap, const struct ns__runserver *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runserver(struct soap *soap, const char *tag, int id, const struct ns__runserver *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__runserver), type))
		return soap->error;
	if (soap_out_int(soap, "command", -1, &a->command, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__runserver * SOAP_FMAC4 soap_in_ns__runserver(struct soap *soap, const char *tag, struct ns__runserver *a, const char *type)
{
	size_t soap_flag_command = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__runserver *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__runserver, sizeof(struct ns__runserver), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__runserver(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_command && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "command", &a->command, "xsd:int"))
				{	soap_flag_command--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__runserver *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__runserver, 0, sizeof(struct ns__runserver), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_command > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runserver(struct soap *soap, const struct ns__runserver *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__runserver);
	if (soap_out_ns__runserver(soap, tag?tag:"ns:runserver", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__runserver * SOAP_FMAC4 soap_get_ns__runserver(struct soap *soap, struct ns__runserver *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__runserver(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__runserver * SOAP_FMAC2 soap_instantiate_ns__runserver(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__runserver(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__runserver, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__runserver);
		if (size)
			*size = sizeof(struct ns__runserver);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__runserver, n);
		if (size)
			*size = n * sizeof(struct ns__runserver);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__runserver*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runserver(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__runserver %p -> %p\n", q, p));
	*(struct ns__runserver*)p = *(struct ns__runserver*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runserverResponse(struct soap *soap, struct ns__runserverResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runserverResponse(struct soap *soap, const struct ns__runserverResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTosoap_overlay_status(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runserverResponse(struct soap *soap, const char *tag, int id, const struct ns__runserverResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__runserverResponse), type))
		return soap->error;
	if (soap_out_PointerTosoap_overlay_status(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__runserverResponse * SOAP_FMAC4 soap_in_ns__runserverResponse(struct soap *soap, const char *tag, struct ns__runserverResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__runserverResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__runserverResponse, sizeof(struct ns__runserverResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__runserverResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTosoap_overlay_status(soap, "result", &a->result, "soap-overlay-status"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__runserverResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__runserverResponse, 0, sizeof(struct ns__runserverResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runserverResponse(struct soap *soap, const struct ns__runserverResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__runserverResponse);
	if (soap_out_ns__runserverResponse(soap, tag?tag:"ns:runserverResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__runserverResponse * SOAP_FMAC4 soap_get_ns__runserverResponse(struct soap *soap, struct ns__runserverResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__runserverResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__runserverResponse * SOAP_FMAC2 soap_instantiate_ns__runserverResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__runserverResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__runserverResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__runserverResponse);
		if (size)
			*size = sizeof(struct ns__runserverResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__runserverResponse, n);
		if (size)
			*size = n * sizeof(struct ns__runserverResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__runserverResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runserverResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__runserverResponse %p -> %p\n", q, p));
	*(struct ns__runserverResponse*)p = *(struct ns__runserverResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runsource(struct soap *soap, struct ns__runsource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->command);
	soap_default_string(soap, &a->sourceurl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runsource(struct soap *soap, const struct ns__runsource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->sourceurl);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runsource(struct soap *soap, const char *tag, int id, const struct ns__runsource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__runsource), type))
		return soap->error;
	if (soap_out_int(soap, "command", -1, &a->command, ""))
		return soap->error;
	if (soap_out_string(soap, "sourceurl", -1, &a->sourceurl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__runsource * SOAP_FMAC4 soap_in_ns__runsource(struct soap *soap, const char *tag, struct ns__runsource *a, const char *type)
{
	size_t soap_flag_command = 1;
	size_t soap_flag_sourceurl = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__runsource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__runsource, sizeof(struct ns__runsource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__runsource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_command && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "command", &a->command, "xsd:int"))
				{	soap_flag_command--;
					continue;
				}
			if (soap_flag_sourceurl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sourceurl", &a->sourceurl, "xsd:string"))
				{	soap_flag_sourceurl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__runsource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__runsource, 0, sizeof(struct ns__runsource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_command > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runsource(struct soap *soap, const struct ns__runsource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__runsource);
	if (soap_out_ns__runsource(soap, tag?tag:"ns:runsource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__runsource * SOAP_FMAC4 soap_get_ns__runsource(struct soap *soap, struct ns__runsource *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__runsource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__runsource * SOAP_FMAC2 soap_instantiate_ns__runsource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__runsource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__runsource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__runsource);
		if (size)
			*size = sizeof(struct ns__runsource);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__runsource, n);
		if (size)
			*size = n * sizeof(struct ns__runsource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__runsource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runsource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__runsource %p -> %p\n", q, p));
	*(struct ns__runsource*)p = *(struct ns__runsource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runsourceResponse(struct soap *soap, struct ns__runsourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runsourceResponse(struct soap *soap, const struct ns__runsourceResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTosoap_overlay_status(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runsourceResponse(struct soap *soap, const char *tag, int id, const struct ns__runsourceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__runsourceResponse), type))
		return soap->error;
	if (soap_out_PointerTosoap_overlay_status(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__runsourceResponse * SOAP_FMAC4 soap_in_ns__runsourceResponse(struct soap *soap, const char *tag, struct ns__runsourceResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__runsourceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__runsourceResponse, sizeof(struct ns__runsourceResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__runsourceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTosoap_overlay_status(soap, "result", &a->result, "soap-overlay-status"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__runsourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__runsourceResponse, 0, sizeof(struct ns__runsourceResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runsourceResponse(struct soap *soap, const struct ns__runsourceResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__runsourceResponse);
	if (soap_out_ns__runsourceResponse(soap, tag?tag:"ns:runsourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__runsourceResponse * SOAP_FMAC4 soap_get_ns__runsourceResponse(struct soap *soap, struct ns__runsourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__runsourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__runsourceResponse * SOAP_FMAC2 soap_instantiate_ns__runsourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__runsourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__runsourceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__runsourceResponse);
		if (size)
			*size = sizeof(struct ns__runsourceResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__runsourceResponse, n);
		if (size)
			*size = n * sizeof(struct ns__runsourceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__runsourceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runsourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__runsourceResponse %p -> %p\n", q, p));
	*(struct ns__runsourceResponse*)p = *(struct ns__runsourceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__delsource(struct soap *soap, struct ns__delsource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->sourceurl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__delsource(struct soap *soap, const struct ns__delsource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->sourceurl);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__delsource(struct soap *soap, const char *tag, int id, const struct ns__delsource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__delsource), type))
		return soap->error;
	if (soap_out_string(soap, "sourceurl", -1, &a->sourceurl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__delsource * SOAP_FMAC4 soap_in_ns__delsource(struct soap *soap, const char *tag, struct ns__delsource *a, const char *type)
{
	size_t soap_flag_sourceurl = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__delsource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__delsource, sizeof(struct ns__delsource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__delsource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sourceurl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sourceurl", &a->sourceurl, "xsd:string"))
				{	soap_flag_sourceurl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__delsource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__delsource, 0, sizeof(struct ns__delsource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__delsource(struct soap *soap, const struct ns__delsource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__delsource);
	if (soap_out_ns__delsource(soap, tag?tag:"ns:delsource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__delsource * SOAP_FMAC4 soap_get_ns__delsource(struct soap *soap, struct ns__delsource *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__delsource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__delsource * SOAP_FMAC2 soap_instantiate_ns__delsource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__delsource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__delsource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__delsource);
		if (size)
			*size = sizeof(struct ns__delsource);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__delsource, n);
		if (size)
			*size = n * sizeof(struct ns__delsource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__delsource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__delsource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__delsource %p -> %p\n", q, p));
	*(struct ns__delsource*)p = *(struct ns__delsource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__delsourceResponse(struct soap *soap, struct ns__delsourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__delsourceResponse(struct soap *soap, const struct ns__delsourceResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTosoap_overlay_status(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__delsourceResponse(struct soap *soap, const char *tag, int id, const struct ns__delsourceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__delsourceResponse), type))
		return soap->error;
	if (soap_out_PointerTosoap_overlay_status(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__delsourceResponse * SOAP_FMAC4 soap_in_ns__delsourceResponse(struct soap *soap, const char *tag, struct ns__delsourceResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__delsourceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__delsourceResponse, sizeof(struct ns__delsourceResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__delsourceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTosoap_overlay_status(soap, "result", &a->result, "soap-overlay-status"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__delsourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__delsourceResponse, 0, sizeof(struct ns__delsourceResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__delsourceResponse(struct soap *soap, const struct ns__delsourceResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__delsourceResponse);
	if (soap_out_ns__delsourceResponse(soap, tag?tag:"ns:delsourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__delsourceResponse * SOAP_FMAC4 soap_get_ns__delsourceResponse(struct soap *soap, struct ns__delsourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__delsourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__delsourceResponse * SOAP_FMAC2 soap_instantiate_ns__delsourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__delsourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__delsourceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__delsourceResponse);
		if (size)
			*size = sizeof(struct ns__delsourceResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__delsourceResponse, n);
		if (size)
			*size = n * sizeof(struct ns__delsourceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__delsourceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__delsourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__delsourceResponse %p -> %p\n", q, p));
	*(struct ns__delsourceResponse*)p = *(struct ns__delsourceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addsource(struct soap *soap, struct ns__addsource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->sourceurl);
	soap_default_string(soap, &a->sourcename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addsource(struct soap *soap, const struct ns__addsource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->sourceurl);
	soap_serialize_string(soap, &a->sourcename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addsource(struct soap *soap, const char *tag, int id, const struct ns__addsource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addsource), type))
		return soap->error;
	if (soap_out_string(soap, "sourceurl", -1, &a->sourceurl, ""))
		return soap->error;
	if (soap_out_string(soap, "sourcename", -1, &a->sourcename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addsource * SOAP_FMAC4 soap_in_ns__addsource(struct soap *soap, const char *tag, struct ns__addsource *a, const char *type)
{
	size_t soap_flag_sourceurl = 1;
	size_t soap_flag_sourcename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addsource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addsource, sizeof(struct ns__addsource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__addsource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sourceurl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sourceurl", &a->sourceurl, "xsd:string"))
				{	soap_flag_sourceurl--;
					continue;
				}
			if (soap_flag_sourcename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "sourcename", &a->sourcename, "xsd:string"))
				{	soap_flag_sourcename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addsource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addsource, 0, sizeof(struct ns__addsource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addsource(struct soap *soap, const struct ns__addsource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__addsource);
	if (soap_out_ns__addsource(soap, tag?tag:"ns:addsource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addsource * SOAP_FMAC4 soap_get_ns__addsource(struct soap *soap, struct ns__addsource *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addsource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addsource * SOAP_FMAC2 soap_instantiate_ns__addsource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addsource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addsource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addsource);
		if (size)
			*size = sizeof(struct ns__addsource);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__addsource, n);
		if (size)
			*size = n * sizeof(struct ns__addsource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__addsource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addsource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addsource %p -> %p\n", q, p));
	*(struct ns__addsource*)p = *(struct ns__addsource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addsourceResponse(struct soap *soap, struct ns__addsourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addsourceResponse(struct soap *soap, const struct ns__addsourceResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTovoverlay_add_source_result(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addsourceResponse(struct soap *soap, const char *tag, int id, const struct ns__addsourceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addsourceResponse), type))
		return soap->error;
	if (soap_out_PointerTovoverlay_add_source_result(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addsourceResponse * SOAP_FMAC4 soap_in_ns__addsourceResponse(struct soap *soap, const char *tag, struct ns__addsourceResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addsourceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addsourceResponse, sizeof(struct ns__addsourceResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__addsourceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTovoverlay_add_source_result(soap, "result", &a->result, "voverlay-add-source-result"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addsourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addsourceResponse, 0, sizeof(struct ns__addsourceResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addsourceResponse(struct soap *soap, const struct ns__addsourceResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__addsourceResponse);
	if (soap_out_ns__addsourceResponse(soap, tag?tag:"ns:addsourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addsourceResponse * SOAP_FMAC4 soap_get_ns__addsourceResponse(struct soap *soap, struct ns__addsourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addsourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addsourceResponse * SOAP_FMAC2 soap_instantiate_ns__addsourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addsourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addsourceResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addsourceResponse);
		if (size)
			*size = sizeof(struct ns__addsourceResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__addsourceResponse, n);
		if (size)
			*size = n * sizeof(struct ns__addsourceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__addsourceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addsourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addsourceResponse %p -> %p\n", q, p));
	*(struct ns__addsourceResponse*)p = *(struct ns__addsourceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_voverlay_add_source_result(struct soap *soap, struct voverlay_add_source_result *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_soap_overlay_status(soap, &a->state);
	soap_default_string(soap, &a->output_url);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_voverlay_add_source_result(struct soap *soap, const struct voverlay_add_source_result *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->state, SOAP_TYPE_soap_overlay_status);
	soap_serialize_soap_overlay_status(soap, &a->state);
	soap_serialize_string(soap, &a->output_url);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_voverlay_add_source_result(struct soap *soap, const char *tag, int id, const struct voverlay_add_source_result *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_voverlay_add_source_result), type))
		return soap->error;
	if (soap_out_soap_overlay_status(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_string(soap, "output-url", -1, &a->output_url, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct voverlay_add_source_result * SOAP_FMAC4 soap_in_voverlay_add_source_result(struct soap *soap, const char *tag, struct voverlay_add_source_result *a, const char *type)
{
	size_t soap_flag_state = 1;
	size_t soap_flag_output_url = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct voverlay_add_source_result *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_voverlay_add_source_result, sizeof(struct voverlay_add_source_result), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_voverlay_add_source_result(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_state && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_soap_overlay_status(soap, "state", &a->state, "soap-overlay-status"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_output_url && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "output-url", &a->output_url, "xsd:string"))
				{	soap_flag_output_url--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct voverlay_add_source_result *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_voverlay_add_source_result, 0, sizeof(struct voverlay_add_source_result), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_state > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_voverlay_add_source_result(struct soap *soap, const struct voverlay_add_source_result *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_voverlay_add_source_result);
	if (soap_out_voverlay_add_source_result(soap, tag?tag:"voverlay-add-source-result", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct voverlay_add_source_result * SOAP_FMAC4 soap_get_voverlay_add_source_result(struct soap *soap, struct voverlay_add_source_result *p, const char *tag, const char *type)
{
	if ((p = soap_in_voverlay_add_source_result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct voverlay_add_source_result * SOAP_FMAC2 soap_instantiate_voverlay_add_source_result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_voverlay_add_source_result(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_voverlay_add_source_result, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct voverlay_add_source_result);
		if (size)
			*size = sizeof(struct voverlay_add_source_result);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct voverlay_add_source_result, n);
		if (size)
			*size = n * sizeof(struct voverlay_add_source_result);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct voverlay_add_source_result*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_voverlay_add_source_result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct voverlay_add_source_result %p -> %p\n", q, p));
	*(struct voverlay_add_source_result*)p = *(struct voverlay_add_source_result*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_overlay_status(struct soap *soap, struct soap_overlay_status *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->errorid);
	soap_default_string(soap, &a->errordesc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_overlay_status(struct soap *soap, const struct soap_overlay_status *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->errordesc);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_overlay_status(struct soap *soap, const char *tag, int id, const struct soap_overlay_status *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_overlay_status), type))
		return soap->error;
	if (soap_out_int(soap, "errorid", -1, &a->errorid, ""))
		return soap->error;
	if (soap_out_string(soap, "errordesc", -1, &a->errordesc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct soap_overlay_status * SOAP_FMAC4 soap_in_soap_overlay_status(struct soap *soap, const char *tag, struct soap_overlay_status *a, const char *type)
{
	size_t soap_flag_errorid = 1;
	size_t soap_flag_errordesc = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct soap_overlay_status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_overlay_status, sizeof(struct soap_overlay_status), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_overlay_status(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "errorid", &a->errorid, "xsd:int"))
				{	soap_flag_errorid--;
					continue;
				}
			if (soap_flag_errordesc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "errordesc", &a->errordesc, "xsd:string"))
				{	soap_flag_errordesc--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_overlay_status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_soap_overlay_status, 0, sizeof(struct soap_overlay_status), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_overlay_status(struct soap *soap, const struct soap_overlay_status *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_overlay_status);
	if (soap_out_soap_overlay_status(soap, tag?tag:"soap-overlay-status", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct soap_overlay_status * SOAP_FMAC4 soap_get_soap_overlay_status(struct soap *soap, struct soap_overlay_status *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_overlay_status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct soap_overlay_status * SOAP_FMAC2 soap_instantiate_soap_overlay_status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_soap_overlay_status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_soap_overlay_status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct soap_overlay_status);
		if (size)
			*size = sizeof(struct soap_overlay_status);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct soap_overlay_status, n);
		if (size)
			*size = n * sizeof(struct soap_overlay_status);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct soap_overlay_status*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap_overlay_status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct soap_overlay_status %p -> %p\n", q, p));
	*(struct soap_overlay_status*)p = *(struct soap_overlay_status*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap_overlay_status(struct soap *soap, struct soap_overlay_status *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_soap_overlay_status))
		soap_serialize_soap_overlay_status(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap_overlay_status(struct soap *soap, const char *tag, int id, struct soap_overlay_status *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_soap_overlay_status);
	if (id < 0)
		return soap->error;
	return soap_out_soap_overlay_status(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_overlay_status ** SOAP_FMAC4 soap_in_PointerTosoap_overlay_status(struct soap *soap, const char *tag, struct soap_overlay_status **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct soap_overlay_status **)soap_malloc(soap, sizeof(struct soap_overlay_status *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_soap_overlay_status(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_overlay_status **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_soap_overlay_status, sizeof(struct soap_overlay_status), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap_overlay_status(struct soap *soap, struct soap_overlay_status *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTosoap_overlay_status);
	if (soap_out_PointerTosoap_overlay_status(soap, tag?tag:"soap-overlay-status", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct soap_overlay_status ** SOAP_FMAC4 soap_get_PointerTosoap_overlay_status(struct soap *soap, struct soap_overlay_status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosoap_overlay_status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTovoverlay_add_source_result(struct soap *soap, struct voverlay_add_source_result *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_voverlay_add_source_result))
		soap_serialize_voverlay_add_source_result(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTovoverlay_add_source_result(struct soap *soap, const char *tag, int id, struct voverlay_add_source_result *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_voverlay_add_source_result);
	if (id < 0)
		return soap->error;
	return soap_out_voverlay_add_source_result(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct voverlay_add_source_result ** SOAP_FMAC4 soap_in_PointerTovoverlay_add_source_result(struct soap *soap, const char *tag, struct voverlay_add_source_result **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct voverlay_add_source_result **)soap_malloc(soap, sizeof(struct voverlay_add_source_result *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_voverlay_add_source_result(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct voverlay_add_source_result **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_voverlay_add_source_result, sizeof(struct voverlay_add_source_result), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTovoverlay_add_source_result(struct soap *soap, struct voverlay_add_source_result *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTovoverlay_add_source_result);
	if (soap_out_PointerTovoverlay_add_source_result(soap, tag?tag:"voverlay-add-source-result", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct voverlay_add_source_result ** SOAP_FMAC4 soap_get_PointerTovoverlay_add_source_result(struct soap *soap, struct voverlay_add_source_result **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTovoverlay_add_source_result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
