// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crime_family.proto

#ifndef PROTOBUF_crime_5ffamily_2eproto__INCLUDED
#define PROTOBUF_crime_5ffamily_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace crime {
class CaseInfo;
class CaseInfoDefaultTypeInternal;
extern CaseInfoDefaultTypeInternal _CaseInfo_default_instance_;
class CrimeInfo;
class CrimeInfoDefaultTypeInternal;
extern CrimeInfoDefaultTypeInternal _CrimeInfo_default_instance_;
class RelationshipInfo;
class RelationshipInfoDefaultTypeInternal;
extern RelationshipInfoDefaultTypeInternal _RelationshipInfo_default_instance_;
}  // namespace crime
}  // namespace com

namespace com {
namespace crime {

namespace protobuf_crime_5ffamily_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_crime_5ffamily_2eproto

// ===================================================================

class CaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.crime.CaseInfo) */ {
 public:
  CaseInfo();
  virtual ~CaseInfo();

  CaseInfo(const CaseInfo& from);

  inline CaseInfo& operator=(const CaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaseInfo& default_instance();

  static inline const CaseInfo* internal_default_instance() {
    return reinterpret_cast<const CaseInfo*>(
               &_CaseInfo_default_instance_);
  }

  void Swap(CaseInfo* other);

  // implements Message ----------------------------------------------

  inline CaseInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CaseInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CaseInfo& from);
  void MergeFrom(const CaseInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.crime.RelationshipInfo relationships = 7;
  int relationships_size() const;
  void clear_relationships();
  static const int kRelationshipsFieldNumber = 7;
  const ::com::crime::RelationshipInfo& relationships(int index) const;
  ::com::crime::RelationshipInfo* mutable_relationships(int index);
  ::com::crime::RelationshipInfo* add_relationships();
  ::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo >*
      mutable_relationships();
  const ::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo >&
      relationships() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string timebegin = 3;
  void clear_timebegin();
  static const int kTimebeginFieldNumber = 3;
  const ::std::string& timebegin() const;
  void set_timebegin(const ::std::string& value);
  #if LANG_CXX11
  void set_timebegin(::std::string&& value);
  #endif
  void set_timebegin(const char* value);
  void set_timebegin(const char* value, size_t size);
  ::std::string* mutable_timebegin();
  ::std::string* release_timebegin();
  void set_allocated_timebegin(::std::string* timebegin);

  // string timeend = 4;
  void clear_timeend();
  static const int kTimeendFieldNumber = 4;
  const ::std::string& timeend() const;
  void set_timeend(const ::std::string& value);
  #if LANG_CXX11
  void set_timeend(::std::string&& value);
  #endif
  void set_timeend(const char* value);
  void set_timeend(const char* value, size_t size);
  ::std::string* mutable_timeend();
  ::std::string* release_timeend();
  void set_allocated_timeend(::std::string* timeend);

  // string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.crime.CaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo > relationships_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr timebegin_;
  ::google::protobuf::internal::ArenaStringPtr timeend_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  friend struct  protobuf_crime_5ffamily_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrimeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.crime.CrimeInfo) */ {
 public:
  CrimeInfo();
  virtual ~CrimeInfo();

  CrimeInfo(const CrimeInfo& from);

  inline CrimeInfo& operator=(const CrimeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrimeInfo& default_instance();

  static inline const CrimeInfo* internal_default_instance() {
    return reinterpret_cast<const CrimeInfo*>(
               &_CrimeInfo_default_instance_);
  }

  void Swap(CrimeInfo* other);

  // implements Message ----------------------------------------------

  inline CrimeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CrimeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrimeInfo& from);
  void MergeFrom(const CrimeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrimeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string avatar = 3;
  void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // string profile = 4;
  void clear_profile();
  static const int kProfileFieldNumber = 4;
  const ::std::string& profile() const;
  void set_profile(const ::std::string& value);
  #if LANG_CXX11
  void set_profile(::std::string&& value);
  #endif
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  ::std::string* mutable_profile();
  ::std::string* release_profile();
  void set_allocated_profile(::std::string* profile);

  // string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string position = 7;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  const ::std::string& position() const;
  void set_position(const ::std::string& value);
  #if LANG_CXX11
  void set_position(::std::string&& value);
  #endif
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  ::std::string* mutable_position();
  ::std::string* release_position();
  void set_allocated_position(::std::string* position);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 visible = 6;
  void clear_visible();
  static const int kVisibleFieldNumber = 6;
  ::google::protobuf::uint32 visible() const;
  void set_visible(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.crime.CrimeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr profile_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr position_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 visible_;
  mutable int _cached_size_;
  friend struct  protobuf_crime_5ffamily_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelationshipInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.crime.RelationshipInfo) */ {
 public:
  RelationshipInfo();
  virtual ~RelationshipInfo();

  RelationshipInfo(const RelationshipInfo& from);

  inline RelationshipInfo& operator=(const RelationshipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationshipInfo& default_instance();

  static inline const RelationshipInfo* internal_default_instance() {
    return reinterpret_cast<const RelationshipInfo*>(
               &_RelationshipInfo_default_instance_);
  }

  void Swap(RelationshipInfo* other);

  // implements Message ----------------------------------------------

  inline RelationshipInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RelationshipInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelationshipInfo& from);
  void MergeFrom(const RelationshipInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelationshipInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string line_color = 5;
  void clear_line_color();
  static const int kLineColorFieldNumber = 5;
  const ::std::string& line_color() const;
  void set_line_color(const ::std::string& value);
  #if LANG_CXX11
  void set_line_color(::std::string&& value);
  #endif
  void set_line_color(const char* value);
  void set_line_color(const char* value, size_t size);
  ::std::string* mutable_line_color();
  ::std::string* release_line_color();
  void set_allocated_line_color(::std::string* line_color);

  // string line_type = 6;
  void clear_line_type();
  static const int kLineTypeFieldNumber = 6;
  const ::std::string& line_type() const;
  void set_line_type(const ::std::string& value);
  #if LANG_CXX11
  void set_line_type(::std::string&& value);
  #endif
  void set_line_type(const char* value);
  void set_line_type(const char* value, size_t size);
  ::std::string* mutable_line_type();
  ::std::string* release_line_type();
  void set_allocated_line_type(::std::string* line_type);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 crime_id_1 = 2;
  void clear_crime_id_1();
  static const int kCrimeId1FieldNumber = 2;
  ::google::protobuf::uint64 crime_id_1() const;
  void set_crime_id_1(::google::protobuf::uint64 value);

  // uint64 crime_id_2 = 3;
  void clear_crime_id_2();
  static const int kCrimeId2FieldNumber = 3;
  ::google::protobuf::uint64 crime_id_2() const;
  void set_crime_id_2(::google::protobuf::uint64 value);

  // uint32 line_size = 7;
  void clear_line_size();
  static const int kLineSizeFieldNumber = 7;
  ::google::protobuf::uint32 line_size() const;
  void set_line_size(::google::protobuf::uint32 value);

  // uint32 visible = 8;
  void clear_visible();
  static const int kVisibleFieldNumber = 8;
  ::google::protobuf::uint32 visible() const;
  void set_visible(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.crime.RelationshipInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr line_color_;
  ::google::protobuf::internal::ArenaStringPtr line_type_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 crime_id_1_;
  ::google::protobuf::uint64 crime_id_2_;
  ::google::protobuf::uint32 line_size_;
  ::google::protobuf::uint32 visible_;
  mutable int _cached_size_;
  friend struct  protobuf_crime_5ffamily_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CaseInfo

// uint64 id = 1;
inline void CaseInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CaseInfo::id() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.id)
  return id_;
}
inline void CaseInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.id)
}

// string name = 2;
inline void CaseInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaseInfo::name() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.name)
  return name_.GetNoArena();
}
inline void CaseInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.name)
}
#if LANG_CXX11
inline void CaseInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.name)
}
#endif
inline void CaseInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.name)
}
inline void CaseInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.name)
}
inline ::std::string* CaseInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaseInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.name)
}

// string timebegin = 3;
inline void CaseInfo::clear_timebegin() {
  timebegin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaseInfo::timebegin() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.timebegin)
  return timebegin_.GetNoArena();
}
inline void CaseInfo::set_timebegin(const ::std::string& value) {
  
  timebegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.timebegin)
}
#if LANG_CXX11
inline void CaseInfo::set_timebegin(::std::string&& value) {
  
  timebegin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.timebegin)
}
#endif
inline void CaseInfo::set_timebegin(const char* value) {
  
  timebegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.timebegin)
}
inline void CaseInfo::set_timebegin(const char* value, size_t size) {
  
  timebegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.timebegin)
}
inline ::std::string* CaseInfo::mutable_timebegin() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.timebegin)
  return timebegin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaseInfo::release_timebegin() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.timebegin)
  
  return timebegin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaseInfo::set_allocated_timebegin(::std::string* timebegin) {
  if (timebegin != NULL) {
    
  } else {
    
  }
  timebegin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timebegin);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.timebegin)
}

// string timeend = 4;
inline void CaseInfo::clear_timeend() {
  timeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaseInfo::timeend() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.timeend)
  return timeend_.GetNoArena();
}
inline void CaseInfo::set_timeend(const ::std::string& value) {
  
  timeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.timeend)
}
#if LANG_CXX11
inline void CaseInfo::set_timeend(::std::string&& value) {
  
  timeend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.timeend)
}
#endif
inline void CaseInfo::set_timeend(const char* value) {
  
  timeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.timeend)
}
inline void CaseInfo::set_timeend(const char* value, size_t size) {
  
  timeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.timeend)
}
inline ::std::string* CaseInfo::mutable_timeend() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.timeend)
  return timeend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaseInfo::release_timeend() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.timeend)
  
  return timeend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaseInfo::set_allocated_timeend(::std::string* timeend) {
  if (timeend != NULL) {
    
  } else {
    
  }
  timeend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeend);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.timeend)
}

// string description = 5;
inline void CaseInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaseInfo::description() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.description)
  return description_.GetNoArena();
}
inline void CaseInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.description)
}
#if LANG_CXX11
inline void CaseInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.description)
}
#endif
inline void CaseInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.description)
}
inline void CaseInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.description)
}
inline ::std::string* CaseInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaseInfo::release_description() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaseInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.description)
}

// string status = 6;
inline void CaseInfo::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaseInfo::status() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.status)
  return status_.GetNoArena();
}
inline void CaseInfo::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.status)
}
#if LANG_CXX11
inline void CaseInfo::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.status)
}
#endif
inline void CaseInfo::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.status)
}
inline void CaseInfo::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.status)
}
inline ::std::string* CaseInfo::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaseInfo::release_status() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaseInfo::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.status)
}

// repeated .com.crime.RelationshipInfo relationships = 7;
inline int CaseInfo::relationships_size() const {
  return relationships_.size();
}
inline void CaseInfo::clear_relationships() {
  relationships_.Clear();
}
inline const ::com::crime::RelationshipInfo& CaseInfo::relationships(int index) const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.relationships)
  return relationships_.Get(index);
}
inline ::com::crime::RelationshipInfo* CaseInfo::mutable_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.relationships)
  return relationships_.Mutable(index);
}
inline ::com::crime::RelationshipInfo* CaseInfo::add_relationships() {
  // @@protoc_insertion_point(field_add:com.crime.CaseInfo.relationships)
  return relationships_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo >*
CaseInfo::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_list:com.crime.CaseInfo.relationships)
  return &relationships_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo >&
CaseInfo::relationships() const {
  // @@protoc_insertion_point(field_list:com.crime.CaseInfo.relationships)
  return relationships_;
}

// -------------------------------------------------------------------

// CrimeInfo

// uint64 id = 1;
inline void CrimeInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CrimeInfo::id() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.id)
  return id_;
}
inline void CrimeInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.id)
}

// string name = 2;
inline void CrimeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CrimeInfo::name() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.name)
  return name_.GetNoArena();
}
inline void CrimeInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.name)
}
#if LANG_CXX11
inline void CrimeInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.name)
}
#endif
inline void CrimeInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.name)
}
inline void CrimeInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.name)
}
inline ::std::string* CrimeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrimeInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrimeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.name)
}

// string avatar = 3;
inline void CrimeInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CrimeInfo::avatar() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.avatar)
  return avatar_.GetNoArena();
}
inline void CrimeInfo::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.avatar)
}
#if LANG_CXX11
inline void CrimeInfo::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.avatar)
}
#endif
inline void CrimeInfo::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.avatar)
}
inline void CrimeInfo::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.avatar)
}
inline ::std::string* CrimeInfo::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrimeInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrimeInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.avatar)
}

// string profile = 4;
inline void CrimeInfo::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CrimeInfo::profile() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.profile)
  return profile_.GetNoArena();
}
inline void CrimeInfo::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.profile)
}
#if LANG_CXX11
inline void CrimeInfo::set_profile(::std::string&& value) {
  
  profile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.profile)
}
#endif
inline void CrimeInfo::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.profile)
}
inline void CrimeInfo::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.profile)
}
inline ::std::string* CrimeInfo::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrimeInfo::release_profile() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.profile)
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrimeInfo::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.profile)
}

// string description = 5;
inline void CrimeInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CrimeInfo::description() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.description)
  return description_.GetNoArena();
}
inline void CrimeInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.description)
}
#if LANG_CXX11
inline void CrimeInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.description)
}
#endif
inline void CrimeInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.description)
}
inline void CrimeInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.description)
}
inline ::std::string* CrimeInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrimeInfo::release_description() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrimeInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.description)
}

// uint32 visible = 6;
inline void CrimeInfo::clear_visible() {
  visible_ = 0u;
}
inline ::google::protobuf::uint32 CrimeInfo::visible() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.visible)
  return visible_;
}
inline void CrimeInfo::set_visible(::google::protobuf::uint32 value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.visible)
}

// string position = 7;
inline void CrimeInfo::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CrimeInfo::position() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.position)
  return position_.GetNoArena();
}
inline void CrimeInfo::set_position(const ::std::string& value) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.position)
}
#if LANG_CXX11
inline void CrimeInfo::set_position(::std::string&& value) {
  
  position_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.position)
}
#endif
inline void CrimeInfo::set_position(const char* value) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.position)
}
inline void CrimeInfo::set_position(const char* value, size_t size) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.position)
}
inline ::std::string* CrimeInfo::mutable_position() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrimeInfo::release_position() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.position)
  
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrimeInfo::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    
  } else {
    
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.position)
}

// -------------------------------------------------------------------

// RelationshipInfo

// uint64 id = 1;
inline void RelationshipInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RelationshipInfo::id() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.id)
  return id_;
}
inline void RelationshipInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.id)
}

// uint64 crime_id_1 = 2;
inline void RelationshipInfo::clear_crime_id_1() {
  crime_id_1_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RelationshipInfo::crime_id_1() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.crime_id_1)
  return crime_id_1_;
}
inline void RelationshipInfo::set_crime_id_1(::google::protobuf::uint64 value) {
  
  crime_id_1_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.crime_id_1)
}

// uint64 crime_id_2 = 3;
inline void RelationshipInfo::clear_crime_id_2() {
  crime_id_2_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RelationshipInfo::crime_id_2() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.crime_id_2)
  return crime_id_2_;
}
inline void RelationshipInfo::set_crime_id_2(::google::protobuf::uint64 value) {
  
  crime_id_2_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.crime_id_2)
}

// string name = 4;
inline void RelationshipInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelationshipInfo::name() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.name)
  return name_.GetNoArena();
}
inline void RelationshipInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.name)
}
#if LANG_CXX11
inline void RelationshipInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.RelationshipInfo.name)
}
#endif
inline void RelationshipInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.RelationshipInfo.name)
}
inline void RelationshipInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.RelationshipInfo.name)
}
inline ::std::string* RelationshipInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.RelationshipInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelationshipInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.crime.RelationshipInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelationshipInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.crime.RelationshipInfo.name)
}

// string line_color = 5;
inline void RelationshipInfo::clear_line_color() {
  line_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelationshipInfo::line_color() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.line_color)
  return line_color_.GetNoArena();
}
inline void RelationshipInfo::set_line_color(const ::std::string& value) {
  
  line_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.line_color)
}
#if LANG_CXX11
inline void RelationshipInfo::set_line_color(::std::string&& value) {
  
  line_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.RelationshipInfo.line_color)
}
#endif
inline void RelationshipInfo::set_line_color(const char* value) {
  
  line_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.RelationshipInfo.line_color)
}
inline void RelationshipInfo::set_line_color(const char* value, size_t size) {
  
  line_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.RelationshipInfo.line_color)
}
inline ::std::string* RelationshipInfo::mutable_line_color() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.RelationshipInfo.line_color)
  return line_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelationshipInfo::release_line_color() {
  // @@protoc_insertion_point(field_release:com.crime.RelationshipInfo.line_color)
  
  return line_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelationshipInfo::set_allocated_line_color(::std::string* line_color) {
  if (line_color != NULL) {
    
  } else {
    
  }
  line_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_color);
  // @@protoc_insertion_point(field_set_allocated:com.crime.RelationshipInfo.line_color)
}

// string line_type = 6;
inline void RelationshipInfo::clear_line_type() {
  line_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelationshipInfo::line_type() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.line_type)
  return line_type_.GetNoArena();
}
inline void RelationshipInfo::set_line_type(const ::std::string& value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.line_type)
}
#if LANG_CXX11
inline void RelationshipInfo::set_line_type(::std::string&& value) {
  
  line_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.RelationshipInfo.line_type)
}
#endif
inline void RelationshipInfo::set_line_type(const char* value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.RelationshipInfo.line_type)
}
inline void RelationshipInfo::set_line_type(const char* value, size_t size) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.RelationshipInfo.line_type)
}
inline ::std::string* RelationshipInfo::mutable_line_type() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.RelationshipInfo.line_type)
  return line_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelationshipInfo::release_line_type() {
  // @@protoc_insertion_point(field_release:com.crime.RelationshipInfo.line_type)
  
  return line_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelationshipInfo::set_allocated_line_type(::std::string* line_type) {
  if (line_type != NULL) {
    
  } else {
    
  }
  line_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_type);
  // @@protoc_insertion_point(field_set_allocated:com.crime.RelationshipInfo.line_type)
}

// uint32 line_size = 7;
inline void RelationshipInfo::clear_line_size() {
  line_size_ = 0u;
}
inline ::google::protobuf::uint32 RelationshipInfo::line_size() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.line_size)
  return line_size_;
}
inline void RelationshipInfo::set_line_size(::google::protobuf::uint32 value) {
  
  line_size_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.line_size)
}

// uint32 visible = 8;
inline void RelationshipInfo::clear_visible() {
  visible_ = 0u;
}
inline ::google::protobuf::uint32 RelationshipInfo::visible() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.visible)
  return visible_;
}
inline void RelationshipInfo::set_visible(::google::protobuf::uint32 value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.visible)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace crime
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crime_5ffamily_2eproto__INCLUDED
