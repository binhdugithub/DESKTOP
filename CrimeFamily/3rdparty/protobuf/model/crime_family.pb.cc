// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crime_family.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crime_family.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace crime {
class CaseInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CaseInfo> {
} _CaseInfo_default_instance_;
class CrimeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CrimeInfo> {
} _CrimeInfo_default_instance_;
class RelationshipInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RelationshipInfo> {
} _RelationshipInfo_default_instance_;

namespace protobuf_crime_5ffamily_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, timebegin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, timeend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaseInfo, relationships_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrimeInfo, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, crime_id_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, crime_id_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, line_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, line_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, line_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationshipInfo, visible_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CaseInfo)},
  { 11, -1, sizeof(CrimeInfo)},
  { 22, -1, sizeof(RelationshipInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrimeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RelationshipInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "crime_family.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CaseInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CrimeInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RelationshipInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CaseInfo_default_instance_.DefaultConstruct();
  _CrimeInfo_default_instance_.DefaultConstruct();
  _RelationshipInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022crime_family.proto\022\tcom.crime\"\241\001\n\010Case"
      "Info\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\021\n\ttimebe"
      "gin\030\003 \001(\t\022\017\n\007timeend\030\004 \001(\t\022\023\n\013descriptio"
      "n\030\005 \001(\t\022\016\n\006status\030\006 \001(\t\0222\n\rrelationships"
      "\030\007 \003(\0132\033.com.crime.RelationshipInfo\"~\n\tC"
      "rimeInfo\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\016\n\006av"
      "atar\030\003 \001(\t\022\017\n\007profile\030\004 \001(\t\022\023\n\013descripti"
      "on\030\005 \001(\t\022\017\n\007visible\030\006 \001(\r\022\020\n\010position\030\007 "
      "\001(\t\"\237\001\n\020RelationshipInfo\022\n\n\002id\030\001 \001(\004\022\022\n\n"
      "crime_id_1\030\002 \001(\004\022\022\n\ncrime_id_2\030\003 \001(\004\022\014\n\004"
      "name\030\004 \001(\t\022\022\n\nline_color\030\005 \001(\t\022\021\n\tline_t"
      "ype\030\006 \001(\t\022\021\n\tline_size\030\007 \001(\r\022\017\n\007visible\030"
      "\010 \001(\rB\022\n\tcom.crimeB\005CRIMEb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "crime_family.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_crime_5ffamily_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaseInfo::kIdFieldNumber;
const int CaseInfo::kNameFieldNumber;
const int CaseInfo::kTimebeginFieldNumber;
const int CaseInfo::kTimeendFieldNumber;
const int CaseInfo::kDescriptionFieldNumber;
const int CaseInfo::kStatusFieldNumber;
const int CaseInfo::kRelationshipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaseInfo::CaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_crime_5ffamily_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.crime.CaseInfo)
}
CaseInfo::CaseInfo(const CaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      relationships_(from.relationships_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  timebegin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timebegin().size() > 0) {
    timebegin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timebegin_);
  }
  timeend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timeend().size() > 0) {
    timeend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeend_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:com.crime.CaseInfo)
}

void CaseInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timebegin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CaseInfo::~CaseInfo() {
  // @@protoc_insertion_point(destructor:com.crime.CaseInfo)
  SharedDtor();
}

void CaseInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timebegin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaseInfo::descriptor() {
  protobuf_crime_5ffamily_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crime_5ffamily_2eproto::file_level_metadata[0].descriptor;
}

const CaseInfo& CaseInfo::default_instance() {
  protobuf_crime_5ffamily_2eproto::InitDefaults();
  return *internal_default_instance();
}

CaseInfo* CaseInfo::New(::google::protobuf::Arena* arena) const {
  CaseInfo* n = new CaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.crime.CaseInfo)
  relationships_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timebegin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

bool CaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.crime.CaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CaseInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timebegin = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timebegin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timebegin().data(), this->timebegin().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CaseInfo.timebegin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timeend = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timeend().data(), this->timeend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CaseInfo.timeend"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CaseInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CaseInfo.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.crime.RelationshipInfo relationships = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_relationships()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.crime.CaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.crime.CaseInfo)
  return false;
#undef DO_
}

void CaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.crime.CaseInfo)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string timebegin = 3;
  if (this->timebegin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timebegin().data(), this->timebegin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.timebegin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timebegin(), output);
  }

  // string timeend = 4;
  if (this->timeend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeend().data(), this->timeend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.timeend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timeend(), output);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status(), output);
  }

  // repeated .com.crime.RelationshipInfo relationships = 7;
  for (unsigned int i = 0, n = this->relationships_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->relationships(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.crime.CaseInfo)
}

::google::protobuf::uint8* CaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.crime.CaseInfo)
  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string timebegin = 3;
  if (this->timebegin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timebegin().data(), this->timebegin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.timebegin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timebegin(), target);
  }

  // string timeend = 4;
  if (this->timeend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeend().data(), this->timeend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.timeend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timeend(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CaseInfo.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status(), target);
  }

  // repeated .com.crime.RelationshipInfo relationships = 7;
  for (unsigned int i = 0, n = this->relationships_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->relationships(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.crime.CaseInfo)
  return target;
}

size_t CaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.crime.CaseInfo)
  size_t total_size = 0;

  // repeated .com.crime.RelationshipInfo relationships = 7;
  {
    unsigned int count = this->relationships_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relationships(i));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string timebegin = 3;
  if (this->timebegin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timebegin());
  }

  // string timeend = 4;
  if (this->timeend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timeend());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.crime.CaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.crime.CaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.crime.CaseInfo)
    MergeFrom(*source);
  }
}

void CaseInfo::MergeFrom(const CaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.crime.CaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relationships_.MergeFrom(from.relationships_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.timebegin().size() > 0) {

    timebegin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timebegin_);
  }
  if (from.timeend().size() > 0) {

    timeend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeend_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.crime.CaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaseInfo::CopyFrom(const CaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.crime.CaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaseInfo::IsInitialized() const {
  return true;
}

void CaseInfo::Swap(CaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaseInfo::InternalSwap(CaseInfo* other) {
  relationships_.UnsafeArenaSwap(&other->relationships_);
  name_.Swap(&other->name_);
  timebegin_.Swap(&other->timebegin_);
  timeend_.Swap(&other->timeend_);
  description_.Swap(&other->description_);
  status_.Swap(&other->status_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaseInfo::GetMetadata() const {
  protobuf_crime_5ffamily_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crime_5ffamily_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaseInfo

// uint64 id = 1;
void CaseInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CaseInfo::id() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.id)
  return id_;
}
void CaseInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.id)
}

// string name = 2;
void CaseInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CaseInfo::name() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.name)
  return name_.GetNoArena();
}
void CaseInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.name)
}
#if LANG_CXX11
void CaseInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.name)
}
#endif
void CaseInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.name)
}
void CaseInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.name)
}
::std::string* CaseInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaseInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.name)
}

// string timebegin = 3;
void CaseInfo::clear_timebegin() {
  timebegin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CaseInfo::timebegin() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.timebegin)
  return timebegin_.GetNoArena();
}
void CaseInfo::set_timebegin(const ::std::string& value) {
  
  timebegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.timebegin)
}
#if LANG_CXX11
void CaseInfo::set_timebegin(::std::string&& value) {
  
  timebegin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.timebegin)
}
#endif
void CaseInfo::set_timebegin(const char* value) {
  
  timebegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.timebegin)
}
void CaseInfo::set_timebegin(const char* value, size_t size) {
  
  timebegin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.timebegin)
}
::std::string* CaseInfo::mutable_timebegin() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.timebegin)
  return timebegin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaseInfo::release_timebegin() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.timebegin)
  
  return timebegin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaseInfo::set_allocated_timebegin(::std::string* timebegin) {
  if (timebegin != NULL) {
    
  } else {
    
  }
  timebegin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timebegin);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.timebegin)
}

// string timeend = 4;
void CaseInfo::clear_timeend() {
  timeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CaseInfo::timeend() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.timeend)
  return timeend_.GetNoArena();
}
void CaseInfo::set_timeend(const ::std::string& value) {
  
  timeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.timeend)
}
#if LANG_CXX11
void CaseInfo::set_timeend(::std::string&& value) {
  
  timeend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.timeend)
}
#endif
void CaseInfo::set_timeend(const char* value) {
  
  timeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.timeend)
}
void CaseInfo::set_timeend(const char* value, size_t size) {
  
  timeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.timeend)
}
::std::string* CaseInfo::mutable_timeend() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.timeend)
  return timeend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaseInfo::release_timeend() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.timeend)
  
  return timeend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaseInfo::set_allocated_timeend(::std::string* timeend) {
  if (timeend != NULL) {
    
  } else {
    
  }
  timeend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeend);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.timeend)
}

// string description = 5;
void CaseInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CaseInfo::description() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.description)
  return description_.GetNoArena();
}
void CaseInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.description)
}
#if LANG_CXX11
void CaseInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.description)
}
#endif
void CaseInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.description)
}
void CaseInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.description)
}
::std::string* CaseInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaseInfo::release_description() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaseInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.description)
}

// string status = 6;
void CaseInfo::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CaseInfo::status() const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.status)
  return status_.GetNoArena();
}
void CaseInfo::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CaseInfo.status)
}
#if LANG_CXX11
void CaseInfo::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CaseInfo.status)
}
#endif
void CaseInfo::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CaseInfo.status)
}
void CaseInfo::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CaseInfo.status)
}
::std::string* CaseInfo::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaseInfo::release_status() {
  // @@protoc_insertion_point(field_release:com.crime.CaseInfo.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaseInfo::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CaseInfo.status)
}

// repeated .com.crime.RelationshipInfo relationships = 7;
int CaseInfo::relationships_size() const {
  return relationships_.size();
}
void CaseInfo::clear_relationships() {
  relationships_.Clear();
}
const ::com::crime::RelationshipInfo& CaseInfo::relationships(int index) const {
  // @@protoc_insertion_point(field_get:com.crime.CaseInfo.relationships)
  return relationships_.Get(index);
}
::com::crime::RelationshipInfo* CaseInfo::mutable_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:com.crime.CaseInfo.relationships)
  return relationships_.Mutable(index);
}
::com::crime::RelationshipInfo* CaseInfo::add_relationships() {
  // @@protoc_insertion_point(field_add:com.crime.CaseInfo.relationships)
  return relationships_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo >*
CaseInfo::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_list:com.crime.CaseInfo.relationships)
  return &relationships_;
}
const ::google::protobuf::RepeatedPtrField< ::com::crime::RelationshipInfo >&
CaseInfo::relationships() const {
  // @@protoc_insertion_point(field_list:com.crime.CaseInfo.relationships)
  return relationships_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrimeInfo::kIdFieldNumber;
const int CrimeInfo::kNameFieldNumber;
const int CrimeInfo::kAvatarFieldNumber;
const int CrimeInfo::kProfileFieldNumber;
const int CrimeInfo::kDescriptionFieldNumber;
const int CrimeInfo::kVisibleFieldNumber;
const int CrimeInfo::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrimeInfo::CrimeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_crime_5ffamily_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.crime.CrimeInfo)
}
CrimeInfo::CrimeInfo(const CrimeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  profile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.profile().size() > 0) {
    profile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.position().size() > 0) {
    position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:com.crime.CrimeInfo)
}

void CrimeInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_) + sizeof(visible_));
  _cached_size_ = 0;
}

CrimeInfo::~CrimeInfo() {
  // @@protoc_insertion_point(destructor:com.crime.CrimeInfo)
  SharedDtor();
}

void CrimeInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrimeInfo::descriptor() {
  protobuf_crime_5ffamily_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crime_5ffamily_2eproto::file_level_metadata[1].descriptor;
}

const CrimeInfo& CrimeInfo::default_instance() {
  protobuf_crime_5ffamily_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrimeInfo* CrimeInfo::New(::google::protobuf::Arena* arena) const {
  CrimeInfo* n = new CrimeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.crime.CrimeInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_) + sizeof(visible_));
}

bool CrimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.crime.CrimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CrimeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CrimeInfo.avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string profile = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profile().data(), this->profile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CrimeInfo.profile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CrimeInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 visible = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string position = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.CrimeInfo.position"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.crime.CrimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.crime.CrimeInfo)
  return false;
#undef DO_
}

void CrimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.crime.CrimeInfo)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string avatar = 3;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  // string profile = 4;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.profile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->profile(), output);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // uint32 visible = 6;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->visible(), output);
  }

  // string position = 7;
  if (this->position().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.crime.CrimeInfo)
}

::google::protobuf::uint8* CrimeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.crime.CrimeInfo)
  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string avatar = 3;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar(), target);
  }

  // string profile = 4;
  if (this->profile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.profile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->profile(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // uint32 visible = 6;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->visible(), target);
  }

  // string position = 7;
  if (this->position().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.CrimeInfo.position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.crime.CrimeInfo)
  return target;
}

size_t CrimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.crime.CrimeInfo)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string avatar = 3;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar());
  }

  // string profile = 4;
  if (this->profile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string position = 7;
  if (this->position().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->position());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 visible = 6;
  if (this->visible() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->visible());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.crime.CrimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CrimeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrimeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.crime.CrimeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.crime.CrimeInfo)
    MergeFrom(*source);
  }
}

void CrimeInfo::MergeFrom(const CrimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.crime.CrimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.profile().size() > 0) {

    profile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.position().size() > 0) {

    position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
}

void CrimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.crime.CrimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrimeInfo::CopyFrom(const CrimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.crime.CrimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrimeInfo::IsInitialized() const {
  return true;
}

void CrimeInfo::Swap(CrimeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrimeInfo::InternalSwap(CrimeInfo* other) {
  name_.Swap(&other->name_);
  avatar_.Swap(&other->avatar_);
  profile_.Swap(&other->profile_);
  description_.Swap(&other->description_);
  position_.Swap(&other->position_);
  std::swap(id_, other->id_);
  std::swap(visible_, other->visible_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrimeInfo::GetMetadata() const {
  protobuf_crime_5ffamily_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crime_5ffamily_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrimeInfo

// uint64 id = 1;
void CrimeInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CrimeInfo::id() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.id)
  return id_;
}
void CrimeInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.id)
}

// string name = 2;
void CrimeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CrimeInfo::name() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.name)
  return name_.GetNoArena();
}
void CrimeInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.name)
}
#if LANG_CXX11
void CrimeInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.name)
}
#endif
void CrimeInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.name)
}
void CrimeInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.name)
}
::std::string* CrimeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrimeInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrimeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.name)
}

// string avatar = 3;
void CrimeInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CrimeInfo::avatar() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.avatar)
  return avatar_.GetNoArena();
}
void CrimeInfo::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.avatar)
}
#if LANG_CXX11
void CrimeInfo::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.avatar)
}
#endif
void CrimeInfo::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.avatar)
}
void CrimeInfo::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.avatar)
}
::std::string* CrimeInfo::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrimeInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrimeInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.avatar)
}

// string profile = 4;
void CrimeInfo::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CrimeInfo::profile() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.profile)
  return profile_.GetNoArena();
}
void CrimeInfo::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.profile)
}
#if LANG_CXX11
void CrimeInfo::set_profile(::std::string&& value) {
  
  profile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.profile)
}
#endif
void CrimeInfo::set_profile(const char* value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.profile)
}
void CrimeInfo::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.profile)
}
::std::string* CrimeInfo::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrimeInfo::release_profile() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.profile)
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrimeInfo::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.profile)
}

// string description = 5;
void CrimeInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CrimeInfo::description() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.description)
  return description_.GetNoArena();
}
void CrimeInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.description)
}
#if LANG_CXX11
void CrimeInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.description)
}
#endif
void CrimeInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.description)
}
void CrimeInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.description)
}
::std::string* CrimeInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrimeInfo::release_description() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrimeInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.description)
}

// uint32 visible = 6;
void CrimeInfo::clear_visible() {
  visible_ = 0u;
}
::google::protobuf::uint32 CrimeInfo::visible() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.visible)
  return visible_;
}
void CrimeInfo::set_visible(::google::protobuf::uint32 value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.visible)
}

// string position = 7;
void CrimeInfo::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CrimeInfo::position() const {
  // @@protoc_insertion_point(field_get:com.crime.CrimeInfo.position)
  return position_.GetNoArena();
}
void CrimeInfo::set_position(const ::std::string& value) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.CrimeInfo.position)
}
#if LANG_CXX11
void CrimeInfo::set_position(::std::string&& value) {
  
  position_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.CrimeInfo.position)
}
#endif
void CrimeInfo::set_position(const char* value) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.CrimeInfo.position)
}
void CrimeInfo::set_position(const char* value, size_t size) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.CrimeInfo.position)
}
::std::string* CrimeInfo::mutable_position() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.CrimeInfo.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrimeInfo::release_position() {
  // @@protoc_insertion_point(field_release:com.crime.CrimeInfo.position)
  
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrimeInfo::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    
  } else {
    
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:com.crime.CrimeInfo.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationshipInfo::kIdFieldNumber;
const int RelationshipInfo::kCrimeId1FieldNumber;
const int RelationshipInfo::kCrimeId2FieldNumber;
const int RelationshipInfo::kNameFieldNumber;
const int RelationshipInfo::kLineColorFieldNumber;
const int RelationshipInfo::kLineTypeFieldNumber;
const int RelationshipInfo::kLineSizeFieldNumber;
const int RelationshipInfo::kVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationshipInfo::RelationshipInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_crime_5ffamily_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.crime.RelationshipInfo)
}
RelationshipInfo::RelationshipInfo(const RelationshipInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  line_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line_color().size() > 0) {
    line_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_color_);
  }
  line_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line_type().size() > 0) {
    line_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_type_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:com.crime.RelationshipInfo)
}

void RelationshipInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_) + sizeof(visible_));
  _cached_size_ = 0;
}

RelationshipInfo::~RelationshipInfo() {
  // @@protoc_insertion_point(destructor:com.crime.RelationshipInfo)
  SharedDtor();
}

void RelationshipInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RelationshipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationshipInfo::descriptor() {
  protobuf_crime_5ffamily_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crime_5ffamily_2eproto::file_level_metadata[2].descriptor;
}

const RelationshipInfo& RelationshipInfo::default_instance() {
  protobuf_crime_5ffamily_2eproto::InitDefaults();
  return *internal_default_instance();
}

RelationshipInfo* RelationshipInfo::New(::google::protobuf::Arena* arena) const {
  RelationshipInfo* n = new RelationshipInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelationshipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.crime.RelationshipInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&id_) + sizeof(visible_));
}

bool RelationshipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.crime.RelationshipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 crime_id_1 = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crime_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 crime_id_2 = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crime_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.RelationshipInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string line_color = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line_color().data(), this->line_color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.RelationshipInfo.line_color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string line_type = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line_type().data(), this->line_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.crime.RelationshipInfo.line_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_size = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 visible = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.crime.RelationshipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.crime.RelationshipInfo)
  return false;
#undef DO_
}

void RelationshipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.crime.RelationshipInfo)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint64 crime_id_1 = 2;
  if (this->crime_id_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->crime_id_1(), output);
  }

  // uint64 crime_id_2 = 3;
  if (this->crime_id_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->crime_id_2(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.RelationshipInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string line_color = 5;
  if (this->line_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_color().data(), this->line_color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.RelationshipInfo.line_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->line_color(), output);
  }

  // string line_type = 6;
  if (this->line_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_type().data(), this->line_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.RelationshipInfo.line_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->line_type(), output);
  }

  // uint32 line_size = 7;
  if (this->line_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->line_size(), output);
  }

  // uint32 visible = 8;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->visible(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.crime.RelationshipInfo)
}

::google::protobuf::uint8* RelationshipInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.crime.RelationshipInfo)
  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint64 crime_id_1 = 2;
  if (this->crime_id_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->crime_id_1(), target);
  }

  // uint64 crime_id_2 = 3;
  if (this->crime_id_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->crime_id_2(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.RelationshipInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string line_color = 5;
  if (this->line_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_color().data(), this->line_color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.RelationshipInfo.line_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->line_color(), target);
  }

  // string line_type = 6;
  if (this->line_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_type().data(), this->line_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.crime.RelationshipInfo.line_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->line_type(), target);
  }

  // uint32 line_size = 7;
  if (this->line_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->line_size(), target);
  }

  // uint32 visible = 8;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->visible(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.crime.RelationshipInfo)
  return target;
}

size_t RelationshipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.crime.RelationshipInfo)
  size_t total_size = 0;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string line_color = 5;
  if (this->line_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line_color());
  }

  // string line_type = 6;
  if (this->line_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line_type());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 crime_id_1 = 2;
  if (this->crime_id_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->crime_id_1());
  }

  // uint64 crime_id_2 = 3;
  if (this->crime_id_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->crime_id_2());
  }

  // uint32 line_size = 7;
  if (this->line_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_size());
  }

  // uint32 visible = 8;
  if (this->visible() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->visible());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationshipInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.crime.RelationshipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationshipInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelationshipInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.crime.RelationshipInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.crime.RelationshipInfo)
    MergeFrom(*source);
  }
}

void RelationshipInfo::MergeFrom(const RelationshipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.crime.RelationshipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.line_color().size() > 0) {

    line_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_color_);
  }
  if (from.line_type().size() > 0) {

    line_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_type_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.crime_id_1() != 0) {
    set_crime_id_1(from.crime_id_1());
  }
  if (from.crime_id_2() != 0) {
    set_crime_id_2(from.crime_id_2());
  }
  if (from.line_size() != 0) {
    set_line_size(from.line_size());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
}

void RelationshipInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.crime.RelationshipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationshipInfo::CopyFrom(const RelationshipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.crime.RelationshipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationshipInfo::IsInitialized() const {
  return true;
}

void RelationshipInfo::Swap(RelationshipInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelationshipInfo::InternalSwap(RelationshipInfo* other) {
  name_.Swap(&other->name_);
  line_color_.Swap(&other->line_color_);
  line_type_.Swap(&other->line_type_);
  std::swap(id_, other->id_);
  std::swap(crime_id_1_, other->crime_id_1_);
  std::swap(crime_id_2_, other->crime_id_2_);
  std::swap(line_size_, other->line_size_);
  std::swap(visible_, other->visible_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelationshipInfo::GetMetadata() const {
  protobuf_crime_5ffamily_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crime_5ffamily_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelationshipInfo

// uint64 id = 1;
void RelationshipInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RelationshipInfo::id() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.id)
  return id_;
}
void RelationshipInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.id)
}

// uint64 crime_id_1 = 2;
void RelationshipInfo::clear_crime_id_1() {
  crime_id_1_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RelationshipInfo::crime_id_1() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.crime_id_1)
  return crime_id_1_;
}
void RelationshipInfo::set_crime_id_1(::google::protobuf::uint64 value) {
  
  crime_id_1_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.crime_id_1)
}

// uint64 crime_id_2 = 3;
void RelationshipInfo::clear_crime_id_2() {
  crime_id_2_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RelationshipInfo::crime_id_2() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.crime_id_2)
  return crime_id_2_;
}
void RelationshipInfo::set_crime_id_2(::google::protobuf::uint64 value) {
  
  crime_id_2_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.crime_id_2)
}

// string name = 4;
void RelationshipInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelationshipInfo::name() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.name)
  return name_.GetNoArena();
}
void RelationshipInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.name)
}
#if LANG_CXX11
void RelationshipInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.RelationshipInfo.name)
}
#endif
void RelationshipInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.RelationshipInfo.name)
}
void RelationshipInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.RelationshipInfo.name)
}
::std::string* RelationshipInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.RelationshipInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelationshipInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.crime.RelationshipInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelationshipInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.crime.RelationshipInfo.name)
}

// string line_color = 5;
void RelationshipInfo::clear_line_color() {
  line_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelationshipInfo::line_color() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.line_color)
  return line_color_.GetNoArena();
}
void RelationshipInfo::set_line_color(const ::std::string& value) {
  
  line_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.line_color)
}
#if LANG_CXX11
void RelationshipInfo::set_line_color(::std::string&& value) {
  
  line_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.RelationshipInfo.line_color)
}
#endif
void RelationshipInfo::set_line_color(const char* value) {
  
  line_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.RelationshipInfo.line_color)
}
void RelationshipInfo::set_line_color(const char* value, size_t size) {
  
  line_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.RelationshipInfo.line_color)
}
::std::string* RelationshipInfo::mutable_line_color() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.RelationshipInfo.line_color)
  return line_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelationshipInfo::release_line_color() {
  // @@protoc_insertion_point(field_release:com.crime.RelationshipInfo.line_color)
  
  return line_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelationshipInfo::set_allocated_line_color(::std::string* line_color) {
  if (line_color != NULL) {
    
  } else {
    
  }
  line_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_color);
  // @@protoc_insertion_point(field_set_allocated:com.crime.RelationshipInfo.line_color)
}

// string line_type = 6;
void RelationshipInfo::clear_line_type() {
  line_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelationshipInfo::line_type() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.line_type)
  return line_type_.GetNoArena();
}
void RelationshipInfo::set_line_type(const ::std::string& value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.line_type)
}
#if LANG_CXX11
void RelationshipInfo::set_line_type(::std::string&& value) {
  
  line_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.crime.RelationshipInfo.line_type)
}
#endif
void RelationshipInfo::set_line_type(const char* value) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.crime.RelationshipInfo.line_type)
}
void RelationshipInfo::set_line_type(const char* value, size_t size) {
  
  line_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.crime.RelationshipInfo.line_type)
}
::std::string* RelationshipInfo::mutable_line_type() {
  
  // @@protoc_insertion_point(field_mutable:com.crime.RelationshipInfo.line_type)
  return line_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelationshipInfo::release_line_type() {
  // @@protoc_insertion_point(field_release:com.crime.RelationshipInfo.line_type)
  
  return line_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelationshipInfo::set_allocated_line_type(::std::string* line_type) {
  if (line_type != NULL) {
    
  } else {
    
  }
  line_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_type);
  // @@protoc_insertion_point(field_set_allocated:com.crime.RelationshipInfo.line_type)
}

// uint32 line_size = 7;
void RelationshipInfo::clear_line_size() {
  line_size_ = 0u;
}
::google::protobuf::uint32 RelationshipInfo::line_size() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.line_size)
  return line_size_;
}
void RelationshipInfo::set_line_size(::google::protobuf::uint32 value) {
  
  line_size_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.line_size)
}

// uint32 visible = 8;
void RelationshipInfo::clear_visible() {
  visible_ = 0u;
}
::google::protobuf::uint32 RelationshipInfo::visible() const {
  // @@protoc_insertion_point(field_get:com.crime.RelationshipInfo.visible)
  return visible_;
}
void RelationshipInfo::set_visible(::google::protobuf::uint32 value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:com.crime.RelationshipInfo.visible)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace crime
}  // namespace com

// @@protoc_insertion_point(global_scope)
